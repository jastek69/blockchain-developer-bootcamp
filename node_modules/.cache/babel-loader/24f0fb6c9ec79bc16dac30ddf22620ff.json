{"ast":null,"code":"/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar core = require('web3-core');\n\nvar helpers = require('web3-core-helpers');\n\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar Method = require('web3-core-method');\n\nvar utils = require('web3-utils');\n\nvar Net = require('web3-net');\n\nvar ENS = require('web3-eth-ens');\n\nvar Personal = require('web3-eth-personal');\n\nvar BaseContract = require('web3-eth-contract');\n\nvar Iban = require('web3-eth-iban');\n\nvar Accounts = require('web3-eth-accounts');\n\nvar abi = require('web3-eth-abi');\n\nvar getNetworkType = require('./getNetworkType.js');\n\nvar formatter = helpers.formatters;\n\nvar blockCall = function blockCall(args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function transactionFromBlockCall(args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function uncleCall(args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function getBlockTransactionCountCall(args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function uncleCountCall(args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\nvar Eth = function Eth() {\n  var _this = this; // sets _requestmanager\n\n\n  core.packageInit(this, arguments); // overwrite setProvider\n\n  var setProvider = this.setProvider;\n\n  this.setProvider = function () {\n    setProvider.apply(_this, arguments);\n\n    _this.net.setProvider.apply(_this, arguments);\n\n    _this.personal.setProvider.apply(_this, arguments);\n\n    _this.accounts.setProvider.apply(_this, arguments);\n\n    _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n  };\n\n  var handleRevert = false;\n  var defaultAccount = null;\n  var defaultBlock = 'latest';\n  var transactionBlockTimeout = 50;\n  var transactionConfirmationBlocks = 24;\n  var transactionPollingTimeout = 750;\n  var defaultChain, defaultHardfork, defaultCommon;\n  Object.defineProperty(this, 'handleRevert', {\n    get: function get() {\n      return handleRevert;\n    },\n    set: function set(val) {\n      handleRevert = val; // also set on the Contract object\n\n      _this.Contract.handleRevert = handleRevert; // update handleRevert\n\n      methods.forEach(function (method) {\n        method.handleRevert = handleRevert;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultCommon', {\n    get: function get() {\n      return defaultCommon;\n    },\n    set: function set(val) {\n      defaultCommon = val; // also set on the Contract object\n\n      _this.Contract.defaultCommon = defaultCommon; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultCommon = defaultCommon;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultHardfork', {\n    get: function get() {\n      return defaultHardfork;\n    },\n    set: function set(val) {\n      defaultHardfork = val; // also set on the Contract object\n\n      _this.Contract.defaultHardfork = defaultHardfork; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultHardfork = defaultHardfork;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultChain', {\n    get: function get() {\n      return defaultChain;\n    },\n    set: function set(val) {\n      defaultChain = val; // also set on the Contract object\n\n      _this.Contract.defaultChain = defaultChain; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultChain = defaultChain;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'transactionPollingTimeout', {\n    get: function get() {\n      return transactionPollingTimeout;\n    },\n    set: function set(val) {\n      transactionPollingTimeout = val; // also set on the Contract object\n\n      _this.Contract.transactionPollingTimeout = transactionPollingTimeout; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.transactionPollingTimeout = transactionPollingTimeout;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'transactionConfirmationBlocks', {\n    get: function get() {\n      return transactionConfirmationBlocks;\n    },\n    set: function set(val) {\n      transactionConfirmationBlocks = val; // also set on the Contract object\n\n      _this.Contract.transactionConfirmationBlocks = transactionConfirmationBlocks; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.transactionConfirmationBlocks = transactionConfirmationBlocks;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'transactionBlockTimeout', {\n    get: function get() {\n      return transactionBlockTimeout;\n    },\n    set: function set(val) {\n      transactionBlockTimeout = val; // also set on the Contract object\n\n      _this.Contract.transactionBlockTimeout = transactionBlockTimeout; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.transactionBlockTimeout = transactionBlockTimeout;\n      });\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultAccount', {\n    get: function get() {\n      return defaultAccount;\n    },\n    set: function set(val) {\n      if (val) {\n        defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n      } // also set on the Contract object\n\n\n      _this.Contract.defaultAccount = defaultAccount;\n      _this.personal.defaultAccount = defaultAccount; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultAccount = defaultAccount;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultBlock', {\n    get: function get() {\n      return defaultBlock;\n    },\n    set: function set(val) {\n      defaultBlock = val; // also set on the Contract object\n\n      _this.Contract.defaultBlock = defaultBlock;\n      _this.personal.defaultBlock = defaultBlock; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultBlock = defaultBlock;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  this.clearSubscriptions = _this._requestManager.clearSubscriptions; // add net\n\n  this.net = new Net(this.currentProvider); // add chain detection\n\n  this.net.getNetworkType = getNetworkType.bind(this); // add accounts\n\n  this.accounts = new Accounts(this.currentProvider); // add personal\n\n  this.personal = new Personal(this.currentProvider);\n  this.personal.defaultAccount = this.defaultAccount; // create a proxy Contract type for this instance, as a Contract's provider\n  // is stored as a class member rather than an instance variable. If we do\n  // not create this proxy type, changing the provider in one instance of\n  // web3-eth would subsequently change the provider for _all_ contract\n  // instances!\n\n  var self = this;\n\n  var Contract = function Contract() {\n    BaseContract.apply(this, arguments); // when Eth.setProvider is called, call packageInit\n    // on all contract instances instantiated via this Eth\n    // instances. This will update the currentProvider for\n    // the contract instances\n\n    var _this = this;\n\n    var setProvider = self.setProvider;\n\n    self.setProvider = function () {\n      setProvider.apply(self, arguments);\n      core.packageInit(_this, [self.currentProvider]);\n    };\n  };\n\n  Contract.setProvider = function () {\n    BaseContract.setProvider.apply(this, arguments);\n  }; // make our proxy Contract inherit from web3-eth-contract so that it has all\n  // the right functionality and so that instanceof and friends work properly\n\n\n  Contract.prototype = Object.create(BaseContract.prototype);\n  Contract.prototype.constructor = Contract; // add contract\n\n  this.Contract = Contract;\n  this.Contract.defaultAccount = this.defaultAccount;\n  this.Contract.defaultBlock = this.defaultBlock;\n  this.Contract.transactionBlockTimeout = this.transactionBlockTimeout;\n  this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks;\n  this.Contract.transactionPollingTimeout = this.transactionPollingTimeout;\n  this.Contract.handleRevert = this.handleRevert;\n  this.Contract.setProvider(this.currentProvider, this.accounts); // add IBAN\n\n  this.Iban = Iban; // add ABI\n\n  this.abi = abi; // add ENS\n\n  this.ens = new ENS(this);\n  var methods = [new Method({\n    name: 'getNodeInfo',\n    call: 'web3_clientVersion'\n  }), new Method({\n    name: 'getProtocolVersion',\n    call: 'eth_protocolVersion',\n    params: 0\n  }), new Method({\n    name: 'getCoinbase',\n    call: 'eth_coinbase',\n    params: 0\n  }), new Method({\n    name: 'isMining',\n    call: 'eth_mining',\n    params: 0\n  }), new Method({\n    name: 'getHashrate',\n    call: 'eth_hashrate',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'isSyncing',\n    call: 'eth_syncing',\n    params: 0,\n    outputFormatter: formatter.outputSyncingFormatter\n  }), new Method({\n    name: 'getGasPrice',\n    call: 'eth_gasPrice',\n    params: 0,\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getAccounts',\n    call: 'eth_accounts',\n    params: 0,\n    outputFormatter: utils.toChecksumAddress\n  }), new Method({\n    name: 'getBlockNumber',\n    call: 'eth_blockNumber',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBalance',\n    call: 'eth_getBalance',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getStorageAt',\n    call: 'eth_getStorageAt',\n    params: 3,\n    inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getCode',\n    call: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getBlock',\n    call: blockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, function (val) {\n      return !!val;\n    }],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getUncle',\n    call: uncleCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getBlockTransactionCount',\n    call: getBlockTransactionCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBlockUncleCount',\n    call: uncleCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getTransaction',\n    call: 'eth_getTransactionByHash',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionFromBlock',\n    call: transactionFromBlockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getTransactionCount',\n    call: 'eth_getTransactionCount',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'sendSignedTransaction',\n    call: 'eth_sendRawTransaction',\n    params: 1,\n    inputFormatter: [null]\n  }), new Method({\n    name: 'signTransaction',\n    call: 'eth_signTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter]\n  }), new Method({\n    name: 'sendTransaction',\n    call: 'eth_sendTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter],\n    abiCoder: abi\n  }), new Method({\n    name: 'sign',\n    call: 'eth_sign',\n    params: 2,\n    inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n    transformPayload: function transformPayload(payload) {\n      payload.params.reverse();\n      return payload;\n    }\n  }), new Method({\n    name: 'call',\n    call: 'eth_call',\n    params: 2,\n    inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter],\n    abiCoder: abi\n  }), new Method({\n    name: 'estimateGas',\n    call: 'eth_estimateGas',\n    params: 1,\n    inputFormatter: [formatter.inputCallFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'submitWork',\n    call: 'eth_submitWork',\n    params: 3\n  }), new Method({\n    name: 'getWork',\n    call: 'eth_getWork',\n    params: 0\n  }), new Method({\n    name: 'getPastLogs',\n    call: 'eth_getLogs',\n    params: 1,\n    inputFormatter: [formatter.inputLogFormatter],\n    outputFormatter: formatter.outputLogFormatter\n  }), new Method({\n    name: 'getChainId',\n    call: 'eth_chainId',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'requestAccounts',\n    call: 'eth_requestAccounts',\n    params: 0,\n    outputFormatter: utils.toChecksumAddress\n  }), new Method({\n    name: 'getProof',\n    call: 'eth_getProof',\n    params: 3,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputStorageKeysFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: formatter.outputProofFormatter\n  }), new Method({\n    name: 'getPendingTransactions',\n    call: 'eth_pendingTransactions',\n    params: 0,\n    outputFormatter: formatter.outputTransactionFormatter\n  }), // subscriptions\n  new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        // TODO rename on RPC side?\n        subscriptionName: 'newHeads',\n        // replace subscription with this name\n        params: 0,\n        outputFormatter: formatter.outputBlockFormatter\n      },\n      'pendingTransactions': {\n        subscriptionName: 'newPendingTransactions',\n        // replace subscription with this name\n        params: 0\n      },\n      'logs': {\n        params: 1,\n        inputFormatter: [formatter.inputLogFormatter],\n        outputFormatter: formatter.outputLogFormatter,\n        // DUBLICATE, also in web3-eth-contract\n        subscriptionHandler: function subscriptionHandler(output) {\n          if (output.removed) {\n            this.emit('changed', output);\n          } else {\n            this.emit('data', output);\n          }\n\n          if (_.isFunction(this.callback)) {\n            this.callback(null, output, this);\n          }\n        }\n      },\n      'syncing': {\n        params: 0,\n        outputFormatter: formatter.outputSyncingFormatter,\n        subscriptionHandler: function subscriptionHandler(output) {\n          var _this = this; // fire TRUE at start\n\n\n          if (this._isSyncing !== true) {\n            this._isSyncing = true;\n            this.emit('changed', _this._isSyncing);\n\n            if (_.isFunction(this.callback)) {\n              this.callback(null, _this._isSyncing, this);\n            }\n\n            setTimeout(function () {\n              _this.emit('data', output);\n\n              if (_.isFunction(_this.callback)) {\n                _this.callback(null, output, _this);\n              }\n            }, 0); // fire sync status\n          } else {\n            this.emit('data', output);\n\n            if (_.isFunction(_this.callback)) {\n              this.callback(null, output, this);\n            } // wait for some time before fireing the FALSE\n\n\n            clearTimeout(this._isSyncingTimeout);\n            this._isSyncingTimeout = setTimeout(function () {\n              if (output.currentBlock > output.highestBlock - 200) {\n                _this._isSyncing = false;\n\n                _this.emit('changed', _this._isSyncing);\n\n                if (_.isFunction(_this.callback)) {\n                  _this.callback(null, _this._isSyncing, _this);\n                }\n              }\n            }, 500);\n          }\n        }\n      }\n    }\n  })];\n  methods.forEach(function (method) {\n    method.attachToObject(_this);\n    method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\n\n    method.defaultBlock = _this.defaultBlock;\n    method.defaultAccount = _this.defaultAccount;\n    method.transactionBlockTimeout = _this.transactionBlockTimeout;\n    method.transactionConfirmationBlocks = _this.transactionConfirmationBlocks;\n    method.transactionPollingTimeout = _this.transactionPollingTimeout;\n    method.handleRevert = _this.handleRevert;\n  });\n};\n\ncore.addProviders(Eth);\nmodule.exports = Eth;","map":{"version":3,"names":["_","require","core","helpers","Subscriptions","subscriptions","Method","utils","Net","ENS","Personal","BaseContract","Iban","Accounts","abi","getNetworkType","formatter","formatters","blockCall","args","isString","indexOf","transactionFromBlockCall","uncleCall","getBlockTransactionCountCall","uncleCountCall","Eth","_this","packageInit","arguments","setProvider","apply","net","personal","accounts","Contract","currentProvider","handleRevert","defaultAccount","defaultBlock","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","defaultChain","defaultHardfork","defaultCommon","Object","defineProperty","get","set","val","methods","forEach","method","enumerable","toChecksumAddress","inputAddressFormatter","clearSubscriptions","_requestManager","bind","self","prototype","create","constructor","ens","name","call","params","outputFormatter","hexToNumber","outputSyncingFormatter","outputBigNumberFormatter","inputFormatter","inputDefaultBlockNumberFormatter","numberToHex","inputBlockNumberFormatter","outputBlockFormatter","outputTransactionFormatter","outputTransactionReceiptFormatter","inputTransactionFormatter","abiCoder","inputSignFormatter","transformPayload","payload","reverse","inputCallFormatter","inputLogFormatter","outputLogFormatter","inputStorageKeysFormatter","outputProofFormatter","type","subscriptionName","subscriptionHandler","output","removed","emit","isFunction","callback","_isSyncing","setTimeout","clearTimeout","_isSyncingTimeout","currentBlock","highestBlock","attachToObject","setRequestManager","addProviders","module","exports"],"sources":["C:/pr0/blockchain-developer-bootcamp/node_modules/web3/node_modules/web3-eth/src/index.js"],"sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar core = require('web3-core');\nvar helpers = require('web3-core-helpers');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\nvar Net = require('web3-net');\n\nvar ENS = require('web3-eth-ens');\nvar Personal = require('web3-eth-personal');\nvar BaseContract = require('web3-eth-contract');\nvar Iban = require('web3-eth-iban');\nvar Accounts = require('web3-eth-accounts');\nvar abi = require('web3-eth-abi');\n\nvar getNetworkType = require('./getNetworkType.js');\nvar formatter = helpers.formatters;\n\n\nvar blockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\n\nvar Eth = function Eth() {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n    // overwrite setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function () {\n        setProvider.apply(_this, arguments);\n        _this.net.setProvider.apply(_this, arguments);\n        _this.personal.setProvider.apply(_this, arguments);\n        _this.accounts.setProvider.apply(_this, arguments);\n        _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n    };\n\n\n    var handleRevert = false;\n    var defaultAccount = null;\n    var defaultBlock = 'latest';\n    var transactionBlockTimeout = 50;\n    var transactionConfirmationBlocks = 24;\n    var transactionPollingTimeout = 750;\n    var defaultChain, defaultHardfork, defaultCommon;\n\n    Object.defineProperty(this, 'handleRevert', {\n        get: function () {\n            return handleRevert;\n        },\n        set: function (val) {\n            handleRevert = val;\n\n            // also set on the Contract object\n            _this.Contract.handleRevert = handleRevert;\n\n            // update handleRevert\n            methods.forEach(function(method) {\n                method.handleRevert = handleRevert;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultCommon', {\n        get: function () {\n            return defaultCommon;\n        },\n        set: function (val) {\n            defaultCommon = val;\n\n            // also set on the Contract object\n            _this.Contract.defaultCommon = defaultCommon;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultCommon = defaultCommon;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultHardfork', {\n        get: function () {\n            return defaultHardfork;\n        },\n        set: function (val) {\n            defaultHardfork = val;\n\n            // also set on the Contract object\n            _this.Contract.defaultHardfork = defaultHardfork;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultHardfork = defaultHardfork;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultChain', {\n        get: function () {\n            return defaultChain;\n        },\n        set: function (val) {\n            defaultChain = val;\n\n            // also set on the Contract object\n            _this.Contract.defaultChain = defaultChain;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultChain = defaultChain;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'transactionPollingTimeout', {\n        get: function () {\n            return transactionPollingTimeout;\n        },\n        set: function (val) {\n            transactionPollingTimeout = val;\n\n            // also set on the Contract object\n            _this.Contract.transactionPollingTimeout = transactionPollingTimeout;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionPollingTimeout = transactionPollingTimeout;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'transactionConfirmationBlocks', {\n        get: function () {\n            return transactionConfirmationBlocks;\n        },\n        set: function (val) {\n            transactionConfirmationBlocks = val;\n\n            // also set on the Contract object\n            _this.Contract.transactionConfirmationBlocks = transactionConfirmationBlocks;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionConfirmationBlocks = transactionConfirmationBlocks;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'transactionBlockTimeout', {\n        get: function () {\n            return transactionBlockTimeout;\n        },\n        set: function (val) {\n            transactionBlockTimeout = val;\n\n            // also set on the Contract object\n            _this.Contract.transactionBlockTimeout = transactionBlockTimeout;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionBlockTimeout = transactionBlockTimeout;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultAccount', {\n        get: function () {\n            return defaultAccount;\n        },\n        set: function (val) {\n            if(val) {\n                defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n            }\n\n            // also set on the Contract object\n            _this.Contract.defaultAccount = defaultAccount;\n            _this.personal.defaultAccount = defaultAccount;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultAccount = defaultAccount;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultBlock', {\n        get: function () {\n            return defaultBlock;\n        },\n        set: function (val) {\n            defaultBlock = val;\n            // also set on the Contract object\n            _this.Contract.defaultBlock = defaultBlock;\n            _this.personal.defaultBlock = defaultBlock;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultBlock = defaultBlock;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n\n\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n\n    // add net\n    this.net = new Net(this.currentProvider);\n    // add chain detection\n    this.net.getNetworkType = getNetworkType.bind(this);\n\n    // add accounts\n    this.accounts = new Accounts(this.currentProvider);\n\n    // add personal\n    this.personal = new Personal(this.currentProvider);\n    this.personal.defaultAccount = this.defaultAccount;\n\n    // create a proxy Contract type for this instance, as a Contract's provider\n    // is stored as a class member rather than an instance variable. If we do\n    // not create this proxy type, changing the provider in one instance of\n    // web3-eth would subsequently change the provider for _all_ contract\n    // instances!\n    var self = this;\n    var Contract = function Contract() {\n        BaseContract.apply(this, arguments);\n\n        // when Eth.setProvider is called, call packageInit\n        // on all contract instances instantiated via this Eth\n        // instances. This will update the currentProvider for\n        // the contract instances\n        var _this = this;\n        var setProvider = self.setProvider;\n        self.setProvider = function() {\n          setProvider.apply(self, arguments);\n          core.packageInit(_this, [self.currentProvider]);\n        };\n    };\n\n    Contract.setProvider = function() {\n        BaseContract.setProvider.apply(this, arguments);\n    };\n\n    // make our proxy Contract inherit from web3-eth-contract so that it has all\n    // the right functionality and so that instanceof and friends work properly\n    Contract.prototype = Object.create(BaseContract.prototype);\n    Contract.prototype.constructor = Contract;\n\n    // add contract\n    this.Contract = Contract;\n    this.Contract.defaultAccount = this.defaultAccount;\n    this.Contract.defaultBlock = this.defaultBlock;\n    this.Contract.transactionBlockTimeout = this.transactionBlockTimeout;\n    this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks;\n    this.Contract.transactionPollingTimeout = this.transactionPollingTimeout;\n    this.Contract.handleRevert = this.handleRevert;\n    this.Contract.setProvider(this.currentProvider, this.accounts);\n\n    // add IBAN\n    this.Iban = Iban;\n\n    // add ABI\n    this.abi = abi;\n\n    // add ENS\n    this.ens = new ENS(this);\n\n    var methods = [\n        new Method({\n            name: 'getNodeInfo',\n            call: 'web3_clientVersion'\n        }),\n        new Method({\n            name: 'getProtocolVersion',\n            call: 'eth_protocolVersion',\n            params: 0\n        }),\n        new Method({\n            name: 'getCoinbase',\n            call: 'eth_coinbase',\n            params: 0\n        }),\n        new Method({\n            name: 'isMining',\n            call: 'eth_mining',\n            params: 0\n        }),\n        new Method({\n            name: 'getHashrate',\n            call: 'eth_hashrate',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'isSyncing',\n            call: 'eth_syncing',\n            params: 0,\n            outputFormatter: formatter.outputSyncingFormatter\n        }),\n        new Method({\n            name: 'getGasPrice',\n            call: 'eth_gasPrice',\n            params: 0,\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getAccounts',\n            call: 'eth_accounts',\n            params: 0,\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: 'getBlockNumber',\n            call: 'eth_blockNumber',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBalance',\n            call: 'eth_getBalance',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getStorageAt',\n            call: 'eth_getStorageAt',\n            params: 3,\n            inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getBlock',\n            call: blockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],\n            outputFormatter: formatter.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getUncle',\n            call: uncleCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputBlockFormatter,\n\n        }),\n        new Method({\n            name: 'getBlockTransactionCount',\n            call: getBlockTransactionCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBlockUncleCount',\n            call: uncleCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getTransaction',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionFromBlock',\n            call: transactionFromBlockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getTransactionCount',\n            call: 'eth_getTransactionCount',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'sendSignedTransaction',\n            call: 'eth_sendRawTransaction',\n            params: 1,\n            inputFormatter: [null]\n        }),\n        new Method({\n            name: 'signTransaction',\n            call: 'eth_signTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter]\n        }),\n        new Method({\n            name: 'sendTransaction',\n            call: 'eth_sendTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter],\n            abiCoder: abi\n        }),\n        new Method({\n            name: 'sign',\n            call: 'eth_sign',\n            params: 2,\n            inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n            transformPayload: function (payload) {\n                payload.params.reverse();\n                return payload;\n            }\n        }),\n        new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter],\n            abiCoder: abi\n        }),\n        new Method({\n            name: 'estimateGas',\n            call: 'eth_estimateGas',\n            params: 1,\n            inputFormatter: [formatter.inputCallFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'submitWork',\n            call: 'eth_submitWork',\n            params: 3\n        }),\n        new Method({\n            name: 'getWork',\n            call: 'eth_getWork',\n            params: 0\n        }),\n        new Method({\n            name: 'getPastLogs',\n            call: 'eth_getLogs',\n            params: 1,\n            inputFormatter: [formatter.inputLogFormatter],\n            outputFormatter: formatter.outputLogFormatter\n        }),\n        new Method({\n            name: 'getChainId',\n            call: 'eth_chainId',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'requestAccounts',\n            call: 'eth_requestAccounts',\n            params: 0,\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: 'getProof',\n            call: 'eth_getProof',\n            params: 3,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputStorageKeysFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: formatter.outputProofFormatter\n        }),\n        new Method({\n            name: 'getPendingTransactions',\n            call: 'eth_pendingTransactions',\n            params: 0,\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n\n        // subscriptions\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    // TODO rename on RPC side?\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatter.outputBlockFormatter\n                },\n                'pendingTransactions': {\n                    subscriptionName: 'newPendingTransactions', // replace subscription with this name\n                    params: 0\n                },\n                'logs': {\n                    params: 1,\n                    inputFormatter: [formatter.inputLogFormatter],\n                    outputFormatter: formatter.outputLogFormatter,\n                    // DUBLICATE, also in web3-eth-contract\n                    subscriptionHandler: function (output) {\n                        if(output.removed) {\n                            this.emit('changed', output);\n                        } else {\n                            this.emit('data', output);\n                        }\n\n                        if (_.isFunction(this.callback)) {\n                            this.callback(null, output, this);\n                        }\n                    }\n                },\n                'syncing': {\n                    params: 0,\n                    outputFormatter: formatter.outputSyncingFormatter,\n                    subscriptionHandler: function (output) {\n                        var _this = this;\n\n                        // fire TRUE at start\n                        if(this._isSyncing !== true) {\n                            this._isSyncing = true;\n                            this.emit('changed', _this._isSyncing);\n\n                            if (_.isFunction(this.callback)) {\n                                this.callback(null, _this._isSyncing, this);\n                            }\n\n                            setTimeout(function () {\n                                _this.emit('data', output);\n\n                                if (_.isFunction(_this.callback)) {\n                                    _this.callback(null, output, _this);\n                                }\n                            }, 0);\n\n                            // fire sync status\n                        } else {\n                            this.emit('data', output);\n                            if (_.isFunction(_this.callback)) {\n                                this.callback(null, output, this);\n                            }\n\n                            // wait for some time before fireing the FALSE\n                            clearTimeout(this._isSyncingTimeout);\n                            this._isSyncingTimeout = setTimeout(function () {\n                                if(output.currentBlock > output.highestBlock - 200) {\n                                    _this._isSyncing = false;\n                                    _this.emit('changed', _this._isSyncing);\n\n                                    if (_.isFunction(_this.callback)) {\n                                        _this.callback(null, _this._isSyncing, _this);\n                                    }\n                                }\n                            }, 500);\n                        }\n                    }\n                }\n            }\n        })\n    ];\n\n    methods.forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\n        method.defaultBlock = _this.defaultBlock;\n        method.defaultAccount = _this.defaultAccount;\n        method.transactionBlockTimeout = _this.transactionBlockTimeout;\n        method.transactionConfirmationBlocks = _this.transactionConfirmationBlocks;\n        method.transactionPollingTimeout = _this.transactionPollingTimeout;\n        method.handleRevert = _this.handleRevert;\n    });\n\n};\n\ncore.addProviders(Eth);\n\n\nmodule.exports = Eth;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}