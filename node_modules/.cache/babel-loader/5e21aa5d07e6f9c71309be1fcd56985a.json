{"ast":null,"code":"import _toConsumableArray from \"C:\\\\pr0\\\\blockchain-developer-bootcamp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\pr0\\\\blockchain-developer-bootcamp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n// Reducers - Redux Store -- handles actions; the form changing\nimport { findIndex } from 'lodash';\nimport { combineReducers } from 'redux';\n\nfunction web3() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'WEB3_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        connection: action.connection\n      });\n\n    case 'WEB3_ACCOUNT_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        account: action.account\n      });\n\n    case 'ETHER_BALANCE_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        balance: action.balance\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction token() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'TOKEN_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loaded: true,\n        contract: action.contract\n      });\n\n    case 'TOKEN_BALANCE_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        balance: action.balance\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction exchange() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var index, data;\n\n  switch (action.type) {\n    case 'EXCHANGE_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loaded: true,\n        contract: action.contract\n      });\n\n    case 'CANCELLED_ORDERS_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cancelledOrders: {\n          loaded: true,\n          data: action.cancelledOrders\n        }\n      });\n\n    case 'FILLED_ORDERS_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filledOrders: {\n          loaded: true,\n          data: action.filledOrders\n        }\n      });\n\n    case 'ALL_ORDERS_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allOrders: {\n          loaded: true,\n          data: action.allOrders\n        }\n      });\n\n    case 'ORDER_CANCELLING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        orderCancelling: true\n      });\n\n    case 'ORDER_CANCELLED':\n      // Adding cancelled order to array\n      return _objectSpread(_objectSpread({}, state), {}, {\n        orderCancelling: false,\n        cancelledOrders: _objectSpread(_objectSpread({}, state.cancelledOrders), {}, {\n          data: [].concat(_toConsumableArray(state.cancelledOrders.data), [action.order])\n        })\n      });\n\n    case 'ORDER_FILLED':\n      // Prevent duplicate orders\n      index = state.filledOrders.data.findIndex(function (order) {\n        return order.id === action.order.id;\n      });\n\n      if (index === -1) {\n        data = [].concat(_toConsumableArray(state.filledOrders.data), [action.order]);\n      } else {\n        data = state.filledOrders.data;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        orderFilling: false,\n        filledOrders: _objectSpread(_objectSpread({}, state.filledOrders), {}, {\n          data: data\n        })\n      });\n\n    case 'ORDER_FILLING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        orderFilling: true\n      });\n    //BALANCES \n\n    case 'EXCHANGE_ETHER_BALANCE_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        etherBalance: action.balance\n      });\n\n    case 'EXCHANGE_TOKEN_BALANCE_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tokenBalance: action.balance\n      });\n\n    case 'BALANCES_LOADING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        balancesLoading: true\n      });\n    // when we call BALANCES_LOADING we set balancesLoading to true\n\n    case 'BALANCES_LOADED':\n      // The selector is looking for balancesLoading \n      return _objectSpread(_objectSpread({}, state), {}, {\n        balancesLoading: false\n      });\n    // BALANCES_LOADED is called when the balances are loaded, so set to false\n\n    case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        etherDepositAmount: action.amount\n      });\n\n    case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        etherWithdrawAmount: action.amount\n      });\n\n    case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tokenDepositAmount: action.amount\n      });\n\n    case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tokenWithdrawAmount: action.amount\n      });\n\n    case 'BUY_ORDER_AMOUT_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        buyOrder: _objectSpread(_objectSpread({}, state.buyOrder), {}, {\n          amount: action.amount\n        })\n      });\n\n    case 'BUY_ORDER_PRICE_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        buyOrder: _objectSpread(_objectSpread({}, state.buyOrder), {}, {\n          price: action.price\n        })\n      });\n\n    case 'BUY_ORDER_MAKING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        buyOrder: _objectSpread(_objectSpread({}, state.buyOrder), {}, {\n          amount: null,\n          price: null,\n          making: true\n        })\n      });\n    // Clear out data to make an order so making is true\n\n    case 'ORDER_MADE':\n      // Prevent duplicate order\n      index = state.allOrders.data.findIndex(order = order.id === action.order.id);\n\n      if (index === -1) {\n        data = [].concat(_toConsumableArray(state.allOrders.data), [action.order]);\n      } else {\n        data = state.allOrders.data;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allOrders: _objectSpread(_objectSpread({}, state.allOrders), {}, {\n          data: data\n        }),\n        buyOrder: _objectSpread(_objectSpread({}, state.buyOrder), {}, {\n          making: false\n        }),\n        sellOrder: _objectSpread(_objectSpread({}, state.sellOrder), {}, {\n          making: false\n        })\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar rootReducer = combineReducers({\n  web3: web3,\n  token: token,\n  exchange: exchange\n});\nexport default rootReducer;","map":{"version":3,"names":["findIndex","combineReducers","web3","state","action","type","connection","account","balance","token","loaded","contract","exchange","index","data","cancelledOrders","filledOrders","allOrders","orderCancelling","order","id","orderFilling","etherBalance","tokenBalance","balancesLoading","etherDepositAmount","amount","etherWithdrawAmount","tokenDepositAmount","tokenWithdrawAmount","buyOrder","price","making","sellOrder","rootReducer"],"sources":["C:/pr0/blockchain-developer-bootcamp/src/store/reducers.js"],"sourcesContent":["// Reducers - Redux Store -- handles actions; the form changing\r\n\r\nimport { findIndex } from 'lodash';\r\nimport { combineReducers } from 'redux'; \r\n\r\nfunction web3(state =  {}, action) {\r\n  switch (action.type) {\r\n    case 'WEB3_LOADED':\r\n      return { ...state, connection: action.connection }\r\n    case 'WEB3_ACCOUNT_LOADED':\r\n      return { ...state, account: action.account }\r\n    case 'ETHER_BALANCE_LOADED':\r\n      return { ...state, balance: action.balance }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nfunction token(state = {}, action) {\r\n  switch (action.type) {\r\n    case 'TOKEN_LOADED':\r\n      return { ...state, loaded: true, contract: action.contract }\r\n    case 'TOKEN_BALANCE_LOADED':\r\n      return { ...state, balance: action.balance }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction exchange(state = {}, action) {\r\n  let index, data\r\n\r\n  switch (action.type) {\r\n    case 'EXCHANGE_LOADED':\r\n      return { ...state, loaded: true, contract: action.contract }\r\n    case 'CANCELLED_ORDERS_LOADED':\r\n      return { ...state, cancelledOrders: { loaded: true, data: action.cancelledOrders } }\r\n    case 'FILLED_ORDERS_LOADED':\r\n      return { ...state, filledOrders: { loaded: true, data: action.filledOrders } }\r\n    case 'ALL_ORDERS_LOADED':\r\n      return { ...state, allOrders: { loaded: true, data: action.allOrders } }\r\n    case 'ORDER_CANCELLING' :\r\n      return { ...state, orderCancelling: true }\r\n    case 'ORDER_CANCELLED': // Adding cancelled order to array\r\n      return{\r\n        ...state,\r\n        orderCancelling: false,\r\n        cancelledOrders: {\r\n          ...state.cancelledOrders,\r\n          data:[\r\n            ...state.cancelledOrders.data,\r\n            action.order\r\n          ]          \r\n        }\r\n      } \r\n    case 'ORDER_FILLED':\r\n      // Prevent duplicate orders\r\n      index = state.filledOrders.data.findIndex(order => order.id === action.order.id)\r\n\r\n      if(index === -1) {\r\n        data = [...state.filledOrders.data, action.order]\r\n      } else {\r\n        data = state.filledOrders.data\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        orderFilling: false,\r\n        filledOrders: {\r\n          ...state.filledOrders,\r\n          data\r\n        }\r\n      }\r\n\r\n    case 'ORDER_FILLING':\r\n      return { ...state, orderFilling: true }\r\n    \r\n  //BALANCES \r\n    case 'EXCHANGE_ETHER_BALANCE_LOADED':\r\n      return { ...state, etherBalance: action.balance }\r\n          \r\n    case 'EXCHANGE_TOKEN_BALANCE_LOADED':\r\n      return { ...state, tokenBalance: action.balance }  \r\n  \r\n    case 'BALANCES_LOADING':\r\n      return { ...state, balancesLoading: true }    // when we call BALANCES_LOADING we set balancesLoading to true\r\n        \r\n    case 'BALANCES_LOADED':                         // The selector is looking for balancesLoading \r\n      return { ...state, balancesLoading: false }   // BALANCES_LOADED is called when the balances are loaded, so set to false\r\n    \r\n    case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\r\n      return { ...state, etherDepositAmount: action.amount }\r\n\r\n    case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\r\n      return { ...state, etherWithdrawAmount: action.amount }\r\n\r\n    case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\r\n      return { ...state, tokenDepositAmount: action.amount }\r\n  \r\n    case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\r\n      return { ...state, tokenWithdrawAmount: action.amount }\r\n\r\n    case 'BUY_ORDER_AMOUT_CHANGED':\r\n      return { ...state, buyOrder: { ...state.buyOrder, amount: action.amount } }\r\n    \r\n    case 'BUY_ORDER_PRICE_CHANGED':\r\n      return { ...state, buyOrder: { ...state.buyOrder, price: action.price} }  \r\n\r\n    case 'BUY_ORDER_MAKING':\r\n      return { ...state, buyOrder: { ...state.buyOrder, amount: null, price: null, making: true } }   // Clear out data to make an order so making is true\r\n\r\n    case 'ORDER_MADE':\r\n      // Prevent duplicate order\r\n      index = state.allOrders.data.findIndex(order = order.id === action.order.id);\r\n\r\n      if(index === -1) {\r\n        data = [...state.allOrders.data, action.order]\r\n      } else {\r\n          data = state.allOrders.data\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        allOrders: {\r\n          ...state.allOrders,\r\n          data\r\n        },\r\n       buyOrder: {\r\n          ...state.buyOrder,\r\n         making: false\r\n        },\r\n        sellOrder: {\r\n          ...state.sellOrder,\r\n          making: false\r\n        }\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    web3,\r\n    token,\r\n    exchange\r\n})\r\n\r\nexport default rootReducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}