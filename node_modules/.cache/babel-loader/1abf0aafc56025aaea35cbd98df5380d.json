{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar chains_1 = require(\"./chains\");\n\nvar hardforks_1 = require(\"./hardforks\");\n/**\n * Common class to access chain and hardfork parameters\n */\n\n\nvar Common =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param chain String ('mainnet') or Number (1) chain\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n   */\n  function Common(chain, hardfork, supportedHardforks) {\n    this._chainParams = this.setChain(chain);\n    this._hardfork = null;\n    this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;\n\n    if (hardfork) {\n      this.setHardfork(hardfork);\n    }\n  }\n  /**\n   * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]\n   * params from [[baseChain]] except the ones overridden in [[customChainParams]].\n   *\n   * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n   * chain params on.\n   * @param customChainParams The custom parameters of the chain.\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n   */\n\n\n  Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n    var standardChainParams = Common._getChainParams(baseChain);\n\n    return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);\n  };\n\n  Common._getChainParams = function (chain) {\n    if (typeof chain === 'number') {\n      if (chains_1.chains['names'][chain]) {\n        return chains_1.chains[chains_1.chains['names'][chain]];\n      }\n\n      throw new Error(\"Chain with ID \" + chain + \" not supported\");\n    }\n\n    if (chains_1.chains[chain]) {\n      return chains_1.chains[chain];\n    }\n\n    throw new Error(\"Chain with name \" + chain + \" not supported\");\n  };\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain\n   *     representation. Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n\n\n  Common.prototype.setChain = function (chain) {\n    if (typeof chain === 'number' || typeof chain === 'string') {\n      this._chainParams = Common._getChainParams(chain);\n    } else if (typeof chain === 'object') {\n      var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n\n      for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {\n        var param = required_1[_i];\n\n        if (chain[param] === undefined) {\n          throw new Error(\"Missing required chain parameter: \" + param);\n        }\n      }\n\n      this._chainParams = chain;\n    } else {\n      throw new Error('Wrong input format');\n    }\n\n    return this._chainParams;\n  };\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier ('byzantium')\n   */\n\n\n  Common.prototype.setHardfork = function (hardfork) {\n    if (!this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n    }\n\n    var changed = false;\n\n    for (var _i = 0, hardforkChanges_1 = hardforks_1.hardforks; _i < hardforkChanges_1.length; _i++) {\n      var hfChanges = hardforkChanges_1[_i];\n\n      if (hfChanges[0] === hardfork) {\n        this._hardfork = hardfork;\n        changed = true;\n      }\n    }\n\n    if (!changed) {\n      throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\n    }\n  };\n  /**\n   * Internal helper function to choose between hardfork set and hardfork provided as param\n   * @param hardfork Hardfork given to function as a parameter\n   * @returns Hardfork chosen to be used\n   */\n\n\n  Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n    onlySupported = onlySupported === undefined ? true : onlySupported;\n\n    if (!hardfork) {\n      if (!this._hardfork) {\n        throw new Error('Method called with neither a hardfork set nor provided by param');\n      } else {\n        hardfork = this._hardfork;\n      }\n    } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n    }\n\n    return hardfork;\n  };\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params\n   */\n\n\n  Common.prototype._getHardfork = function (hardfork) {\n    var hfs = this.hardforks();\n\n    for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {\n      var hf = hfs_1[_i];\n      if (hf['name'] === hardfork) return hf;\n    }\n\n    throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\n  };\n  /**\n   * Internal helper function to check if a hardfork is set to be supported by the library\n   * @param hardfork Hardfork name\n   * @returns True if hardfork is supported\n   */\n\n\n  Common.prototype._isSupportedHardfork = function (hardfork) {\n    if (this._supportedHardforks.length > 0) {\n      for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {\n        var supportedHf = _a[_i];\n        if (hardfork === supportedHf) return true;\n      }\n    } else {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name, optional if hardfork set\n   */\n\n\n  Common.prototype.param = function (topic, name, hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    var value;\n\n    for (var _i = 0, hardforkChanges_2 = hardforks_1.hardforks; _i < hardforkChanges_2.length; _i++) {\n      var hfChanges = hardforkChanges_2[_i];\n\n      if (!hfChanges[1][topic]) {\n        throw new Error(\"Topic \" + topic + \" not defined\");\n      }\n\n      if (hfChanges[1][topic][name] !== undefined) {\n        value = hfChanges[1][topic][name].v;\n      }\n\n      if (hfChanges[0] === hardfork) break;\n    }\n\n    if (value === undefined) {\n      throw new Error(topic + \" value for \" + name + \" not found\");\n    }\n\n    return value;\n  };\n  /**\n   * Returns a parameter for the hardfork active on block number\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   */\n\n\n  Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n    var activeHfs = this.activeHardforks(blockNumber);\n    var hardfork = activeHfs[activeHfs.length - 1]['name'];\n    return this.param(topic, name, hardfork);\n  };\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n\n\n  Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n    var hfBlock = this.hardforkBlock(hardfork);\n    if (hfBlock !== null && blockNumber >= hfBlock) return true;\n    return false;\n  };\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n\n\n  Common.prototype.activeOnBlock = function (blockNumber, opts) {\n    return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n  };\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n\n\n  Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n    hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n    var hardforks;\n\n    if (onlyActive) {\n      hardforks = this.activeHardforks(null, opts);\n    } else {\n      hardforks = this.hardforks();\n    }\n\n    var posHf1 = -1,\n        posHf2 = -1;\n    var index = 0;\n\n    for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {\n      var hf = hardforks_2[_i];\n      if (hf['name'] === hardfork1) posHf1 = index;\n      if (hf['name'] === hardfork2) posHf2 = index;\n      index += 1;\n    }\n\n    return posHf1 >= posHf2;\n  };\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @param opts Hardfork options\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n\n\n  Common.prototype.gteHardfork = function (hardfork, opts) {\n    return this.hardforkGteHardfork(null, hardfork, opts);\n  };\n  /**\n   * Checks if given or set hardfork is active on the chain\n   * @param hardfork Hardfork name, optional if HF set\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if hardfork is active on the chain\n   */\n\n\n  Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n\n    for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {\n      var hf = _a[_i];\n      if (hf['name'] === hardfork && hf['block'] !== null) return true;\n    }\n\n    return false;\n  };\n  /**\n   * Returns the active hardfork switches for the current chain\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Array with hardfork arrays\n   */\n\n\n  Common.prototype.activeHardforks = function (blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var activeHardforks = [];\n    var hfs = this.hardforks();\n\n    for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {\n      var hf = hfs_2[_i];\n      if (hf['block'] === null) continue;\n      if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break;\n      if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue;\n      activeHardforks.push(hf);\n    }\n\n    return activeHardforks;\n  };\n  /**\n   * Returns the latest active hardfork name for chain or block or throws if unavailable\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Hardfork name\n   */\n\n\n  Common.prototype.activeHardfork = function (blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var activeHardforks = this.activeHardforks(blockNumber, opts);\n\n    if (activeHardforks.length > 0) {\n      return activeHardforks[activeHardforks.length - 1]['name'];\n    } else {\n      throw new Error(\"No (supported) active hardfork found\");\n    }\n  };\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number\n   */\n\n\n  Common.prototype.hardforkBlock = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    return this._getHardfork(hardfork)['block'];\n  };\n  /**\n   * True if block number provided is the hardfork (given or set) change block of the current chain\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n\n\n  Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n\n    if (this.hardforkBlock(hardfork) === blockNumber) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Provide the consensus type for the hardfork set or provided as param\n   * @param hardfork Hardfork name, optional if hardfork set\n   * @returns Consensus type (e.g. 'pow', 'poa')\n   */\n\n\n  Common.prototype.consensus = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    return this._getHardfork(hardfork)['consensus'];\n  };\n  /**\n   * Provide the finality type for the hardfork set or provided as param\n   * @param {String} hardfork Hardfork name, optional if hardfork set\n   * @returns {String} Finality type (e.g. 'pos', null of no finality)\n   */\n\n\n  Common.prototype.finality = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    return this._getHardfork(hardfork)['finality'];\n  };\n  /**\n   * Returns the Genesis parameters of current chain\n   * @returns Genesis dictionary\n   */\n\n\n  Common.prototype.genesis = function () {\n    return this._chainParams['genesis'];\n  };\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n\n\n  Common.prototype.hardforks = function () {\n    return this._chainParams['hardforks'];\n  };\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n\n\n  Common.prototype.bootstrapNodes = function () {\n    return this._chainParams['bootstrapNodes'];\n  };\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n\n\n  Common.prototype.hardfork = function () {\n    return this._hardfork;\n  };\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n\n\n  Common.prototype.chainId = function () {\n    return this._chainParams['chainId'];\n  };\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n\n\n  Common.prototype.chainName = function () {\n    return chains_1.chains['names'][this.chainId()] || this._chainParams['name'];\n  };\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n\n\n  Common.prototype.networkId = function () {\n    return this._chainParams['networkId'];\n  };\n\n  return Common;\n}();\n\nexports.default = Common;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chains_1 = require(\"./chains\");\nvar hardforks_1 = require(\"./hardforks\");\n/**\n * Common class to access chain and hardfork parameters\n */\nvar Common = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param chain String ('mainnet') or Number (1) chain\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n     */\n    function Common(chain, hardfork, supportedHardforks) {\n        this._chainParams = this.setChain(chain);\n        this._hardfork = null;\n        this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;\n        if (hardfork) {\n            this.setHardfork(hardfork);\n        }\n    }\n    /**\n     * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]\n     * params from [[baseChain]] except the ones overridden in [[customChainParams]].\n     *\n     * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n     * chain params on.\n     * @param customChainParams The custom parameters of the chain.\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n     */\n    Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n        var standardChainParams = Common._getChainParams(baseChain);\n        return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);\n    };\n    Common._getChainParams = function (chain) {\n        if (typeof chain === 'number') {\n            if (chains_1.chains['names'][chain]) {\n                return chains_1.chains[chains_1.chains['names'][chain]];\n            }\n            throw new Error(\"Chain with ID \" + chain + \" not supported\");\n        }\n        if (chains_1.chains[chain]) {\n            return chains_1.chains[chain];\n        }\n        throw new Error(\"Chain with name \" + chain + \" not supported\");\n    };\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain\n     *     representation. Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    Common.prototype.setChain = function (chain) {\n        if (typeof chain === 'number' || typeof chain === 'string') {\n            this._chainParams = Common._getChainParams(chain);\n        }\n        else if (typeof chain === 'object') {\n            var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {\n                var param = required_1[_i];\n                if (chain[param] === undefined) {\n                    throw new Error(\"Missing required chain parameter: \" + param);\n                }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        return this._chainParams;\n    };\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier ('byzantium')\n     */\n    Common.prototype.setHardfork = function (hardfork) {\n        if (!this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n        }\n        var changed = false;\n        for (var _i = 0, hardforkChanges_1 = hardforks_1.hardforks; _i < hardforkChanges_1.length; _i++) {\n            var hfChanges = hardforkChanges_1[_i];\n            if (hfChanges[0] === hardfork) {\n                this._hardfork = hardfork;\n                changed = true;\n            }\n        }\n        if (!changed) {\n            throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\n        }\n    };\n    /**\n     * Internal helper function to choose between hardfork set and hardfork provided as param\n     * @param hardfork Hardfork given to function as a parameter\n     * @returns Hardfork chosen to be used\n     */\n    Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n        onlySupported = onlySupported === undefined ? true : onlySupported;\n        if (!hardfork) {\n            if (!this._hardfork) {\n                throw new Error('Method called with neither a hardfork set nor provided by param');\n            }\n            else {\n                hardfork = this._hardfork;\n            }\n        }\n        else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n        }\n        return hardfork;\n    };\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params\n     */\n    Common.prototype._getHardfork = function (hardfork) {\n        var hfs = this.hardforks();\n        for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {\n            var hf = hfs_1[_i];\n            if (hf['name'] === hardfork)\n                return hf;\n        }\n        throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\n    };\n    /**\n     * Internal helper function to check if a hardfork is set to be supported by the library\n     * @param hardfork Hardfork name\n     * @returns True if hardfork is supported\n     */\n    Common.prototype._isSupportedHardfork = function (hardfork) {\n        if (this._supportedHardforks.length > 0) {\n            for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {\n                var supportedHf = _a[_i];\n                if (hardfork === supportedHf)\n                    return true;\n            }\n        }\n        else {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name, optional if hardfork set\n     */\n    Common.prototype.param = function (topic, name, hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        var value;\n        for (var _i = 0, hardforkChanges_2 = hardforks_1.hardforks; _i < hardforkChanges_2.length; _i++) {\n            var hfChanges = hardforkChanges_2[_i];\n            if (!hfChanges[1][topic]) {\n                throw new Error(\"Topic \" + topic + \" not defined\");\n            }\n            if (hfChanges[1][topic][name] !== undefined) {\n                value = hfChanges[1][topic][name].v;\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        if (value === undefined) {\n            throw new Error(topic + \" value for \" + name + \" not found\");\n        }\n        return value;\n    };\n    /**\n     * Returns a parameter for the hardfork active on block number\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     */\n    Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n        var activeHfs = this.activeHardforks(blockNumber);\n        var hardfork = activeHfs[activeHfs.length - 1]['name'];\n        return this.param(topic, name, hardfork);\n    };\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        var hfBlock = this.hardforkBlock(hardfork);\n        if (hfBlock !== null && blockNumber >= hfBlock)\n            return true;\n        return false;\n    };\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.activeOnBlock = function (blockNumber, opts) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n    };\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n        hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n        var hardforks;\n        if (onlyActive) {\n            hardforks = this.activeHardforks(null, opts);\n        }\n        else {\n            hardforks = this.hardforks();\n        }\n        var posHf1 = -1, posHf2 = -1;\n        var index = 0;\n        for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {\n            var hf = hardforks_2[_i];\n            if (hf['name'] === hardfork1)\n                posHf1 = index;\n            if (hf['name'] === hardfork2)\n                posHf2 = index;\n            index += 1;\n        }\n        return posHf1 >= posHf2;\n    };\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @param opts Hardfork options\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    Common.prototype.gteHardfork = function (hardfork, opts) {\n        return this.hardforkGteHardfork(null, hardfork, opts);\n    };\n    /**\n     * Checks if given or set hardfork is active on the chain\n     * @param hardfork Hardfork name, optional if HF set\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if hardfork is active on the chain\n     */\n    Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {\n            var hf = _a[_i];\n            if (hf['name'] === hardfork && hf['block'] !== null)\n                return true;\n        }\n        return false;\n    };\n    /**\n     * Returns the active hardfork switches for the current chain\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Array with hardfork arrays\n     */\n    Common.prototype.activeHardforks = function (blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var activeHardforks = [];\n        var hfs = this.hardforks();\n        for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {\n            var hf = hfs_2[_i];\n            if (hf['block'] === null)\n                continue;\n            if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block'])\n                break;\n            if (opts.onlySupported && !this._isSupportedHardfork(hf['name']))\n                continue;\n            activeHardforks.push(hf);\n        }\n        return activeHardforks;\n    };\n    /**\n     * Returns the latest active hardfork name for chain or block or throws if unavailable\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Hardfork name\n     */\n    Common.prototype.activeHardfork = function (blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var activeHardforks = this.activeHardforks(blockNumber, opts);\n        if (activeHardforks.length > 0) {\n            return activeHardforks[activeHardforks.length - 1]['name'];\n        }\n        else {\n            throw new Error(\"No (supported) active hardfork found\");\n        }\n    };\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number\n     */\n    Common.prototype.hardforkBlock = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        return this._getHardfork(hardfork)['block'];\n    };\n    /**\n     * True if block number provided is the hardfork (given or set) change block of the current chain\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     */\n    Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        if (this.hardforkBlock(hardfork) === blockNumber) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Provide the consensus type for the hardfork set or provided as param\n     * @param hardfork Hardfork name, optional if hardfork set\n     * @returns Consensus type (e.g. 'pow', 'poa')\n     */\n    Common.prototype.consensus = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        return this._getHardfork(hardfork)['consensus'];\n    };\n    /**\n     * Provide the finality type for the hardfork set or provided as param\n     * @param {String} hardfork Hardfork name, optional if hardfork set\n     * @returns {String} Finality type (e.g. 'pos', null of no finality)\n     */\n    Common.prototype.finality = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        return this._getHardfork(hardfork)['finality'];\n    };\n    /**\n     * Returns the Genesis parameters of current chain\n     * @returns Genesis dictionary\n     */\n    Common.prototype.genesis = function () {\n        return this._chainParams['genesis'];\n    };\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    Common.prototype.hardforks = function () {\n        return this._chainParams['hardforks'];\n    };\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    Common.prototype.bootstrapNodes = function () {\n        return this._chainParams['bootstrapNodes'];\n    };\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    Common.prototype.hardfork = function () {\n        return this._hardfork;\n    };\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    Common.prototype.chainId = function () {\n        return this._chainParams['chainId'];\n    };\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    Common.prototype.chainName = function () {\n        return chains_1.chains['names'][this.chainId()] || this._chainParams['name'];\n    };\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    Common.prototype.networkId = function () {\n        return this._chainParams['networkId'];\n    };\n    return Common;\n}());\nexports.default = Common;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}