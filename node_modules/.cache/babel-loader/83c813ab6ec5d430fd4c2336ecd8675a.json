{"ast":null,"code":"import _asyncToGenerator from \"C:/pr0/blockchain-developer-bootcamp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"C:\\\\pr0\\\\blockchain-developer-bootcamp\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport Web3 from 'web3';\nimport { web3Loaded, web3AccountLoaded, tokenLoaded, exchangeLoaded, cancelledOrdersLoaded, filledOrdersLoaded, allOrdersLoaded } from './actions';\nimport Token from '../abis/Token.json';\nimport Exchange from '../abis/Exchange.json';\nexport var loadWeb3 = function loadWeb3(dispatch) {\n  // const web3 = new Web3(Web3.givenProvider || 'http://localhost:7545')\n  var web3 = new Web3(window.ethereum || 'http://localhost:7545');\n  dispatch(web3Loaded(web3));\n  return web3;\n};\nexport var loadAccount = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(web3, dispatch) {\n    var accounts, account;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return window.ethereum.request({\n              method: 'eth_requestAccounts'\n            });\n\n          case 2:\n            accounts = _context.sent;\n            account = web3.utils.toChecksumAddress(accounts[0]); // const accounts = await web3.eth.getAccounts()\n            // const account = accounts[0]\n\n            dispatch(web3AccountLoaded(account));\n            return _context.abrupt(\"return\", account);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadAccount(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}(); // export const loadAccount = async (web3, dispatch) => {\n//     const Web3 = require(\"web3\");\n//     const ethEnabled = async () => {\n//     if (window.ethereum) {\n//         await window.ethereum.send('eth_requestAccounts');\n//         window.web3 = new Web3(window.ethereum);\n//         return true;\n//     }\n//     return false;\n//     }\n//     const accounts = await web3.eth.getAccounts();\n//     console.log(\"account if it is connecting or not \", accounts)\n//     const account = await accounts[0]\n//     if(typeof account != 'undefined'){\n//         dispatch(web3AccountLoaded(account))\n//         return account\n//     } else {\n//         window.alert('Please login with MetaMask ')\n//         return ethEnabled;\n//         }\n// }\n\nexport var loadToken = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3, networkId, dispatch) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n            dispatch(tokenLoaded(token));\n            return _context2.abrupt(\"return\", token);\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context2.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 6]]);\n  }));\n\n  return function loadToken(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var loadExchange = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(web3, networkId, dispatch) {\n    var exchange;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address);\n            dispatch(exchangeLoaded(exchange));\n            return _context3.abrupt(\"return\", exchange);\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context3.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6]]);\n  }));\n\n  return function loadExchange(_x6, _x7, _x8) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var loadAllOrders = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(exchange, dispatch) {\n    var cancelStream, cancelledOrders, tradeStream, filledOrders, orderStream, allOrders;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return exchange.getPastEvents('Cancel', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 2:\n            cancelStream = _context4.sent;\n            // setting to 'latest' will check entire blockchain \n            // Format cancelled orders\n            cancelledOrders = cancelStream.map(function (event) {\n              return event.returnValues;\n            }); // Add cancelled orders to the redux store\n\n            dispatch(cancelledOrdersLoaded(cancelledOrders)); // adding to the Redux state\n            // Fetch filled orders with the \"trade\" event stream\n\n            _context4.next = 7;\n            return exchange.getPastEvents('Trade', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 7:\n            tradeStream = _context4.sent;\n            // Format filled orders\n            filledOrders = tradeStream.map(function (event) {\n              return event.returnValues;\n            }); // Add trade orders to the redux store\n\n            dispatch(filledOrdersLoaded(filledOrders)); // adding to the Redux state\n            // Load order stream -- shows all Orders from Exchange.sol\n\n            _context4.next = 12;\n            return exchange.getPastEvents('Order', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 12:\n            orderStream = _context4.sent;\n            // Format order stream\n            allOrders = orderStream.map(function (event) {\n              return event.returnValues;\n            }); // Add trade orders to the redux store\n\n            dispatch(allOrdersLoaded(allOrders)); // adding to the Redux state\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function loadAllOrders(_x9, _x10) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Web3","web3Loaded","web3AccountLoaded","tokenLoaded","exchangeLoaded","cancelledOrdersLoaded","filledOrdersLoaded","allOrdersLoaded","Token","Exchange","loadWeb3","dispatch","web3","window","ethereum","loadAccount","request","method","accounts","account","utils","toChecksumAddress","loadToken","networkId","token","eth","Contract","abi","networks","address","console","log","loadExchange","exchange","loadAllOrders","getPastEvents","fromBlock","toBlock","cancelStream","cancelledOrders","map","event","returnValues","tradeStream","filledOrders","orderStream","allOrders"],"sources":["C:/pr0/blockchain-developer-bootcamp/src/store/interactions.js"],"sourcesContent":["\r\nimport Web3 from 'web3'\r\nimport {\r\n    web3Loaded,\r\n    web3AccountLoaded,\r\n    tokenLoaded,\r\n    exchangeLoaded,\r\n    cancelledOrdersLoaded,\r\n    filledOrdersLoaded,\r\n    allOrdersLoaded\r\n} from './actions'\r\nimport Token from '../abis/Token.json'\r\nimport Exchange from '../abis/Exchange.json'\r\n\r\nexport const loadWeb3 = (dispatch) => {\r\n// const web3 = new Web3(Web3.givenProvider || 'http://localhost:7545')\r\n   const web3 = new Web3(window.ethereum || 'http://localhost:7545')\r\n   dispatch(web3Loaded(web3))\r\n    return web3\r\n}\r\n\r\n\r\nexport const loadAccount = async (web3, dispatch) => {\r\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n    const account = web3.utils.toChecksumAddress(accounts[0])\r\n    \r\n    // const accounts = await web3.eth.getAccounts()\r\n    // const account = accounts[0]\r\n    dispatch(web3AccountLoaded(account))\r\n    return account\r\n}\r\n\r\n// export const loadAccount = async (web3, dispatch) => {\r\n//     const Web3 = require(\"web3\");\r\n//     const ethEnabled = async () => {\r\n//     if (window.ethereum) {\r\n//         await window.ethereum.send('eth_requestAccounts');\r\n//         window.web3 = new Web3(window.ethereum);\r\n//         return true;\r\n//     }\r\n//     return false;\r\n//     }\r\n//     const accounts = await web3.eth.getAccounts();\r\n//     console.log(\"account if it is connecting or not \", accounts)\r\n//     const account = await accounts[0]\r\n//     if(typeof account != 'undefined'){\r\n//         dispatch(web3AccountLoaded(account))\r\n//         return account\r\n//     } else {\r\n//         window.alert('Please login with MetaMask ')\r\n//         return ethEnabled;\r\n//         }\r\n// }\r\n\r\nexport const loadToken = async (web3, networkId, dispatch) => {\r\n    try {\r\n        const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address) \r\n        dispatch(tokenLoaded(token))\r\n        return token\r\n    } catch(error) {\r\n      console.log('Contract not deployed to the current network. Please select another network with Metamask.')\r\n      return null  \r\n    }        \r\n}\r\n\r\n\r\nexport const loadExchange = async (web3, networkId, dispatch) => {\r\n    try {\r\n        const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address) \r\n        dispatch(exchangeLoaded(exchange))\r\n        return exchange\r\n    } catch(error) {\r\n      console.log('Contract not deployed to the current network. Please select another network with Metamask.')\r\n      return null  \r\n    }        \r\n}\r\n\r\n\r\nexport const loadAllOrders = async(exchange, dispatch) => {\r\n// Fetch cancelled orders with \"Cancel\" event stream \r\n    const cancelStream = await exchange.getPastEvents('Cancel', { fromBlock: 0, toBlock: 'latest' }) // setting to 'latest' will check entire blockchain \r\n\r\n// Format cancelled orders\r\n    const cancelledOrders = cancelStream.map((event) => event.returnValues)\r\n\r\n// Add cancelled orders to the redux store\r\n    dispatch(cancelledOrdersLoaded(cancelledOrders)) // adding to the Redux state\r\n\r\n// Fetch filled orders with the \"trade\" event stream\r\n    const tradeStream = await exchange.getPastEvents('Trade', { fromBlock: 0, toBlock: 'latest' })\r\n\r\n// Format filled orders\r\n    const filledOrders = tradeStream.map((event) => event.returnValues)\r\n\r\n// Add trade orders to the redux store\r\n    dispatch(filledOrdersLoaded(filledOrders)) // adding to the Redux state\r\n\r\n// Load order stream -- shows all Orders from Exchange.sol\r\n    const orderStream = await exchange.getPastEvents('Order', { fromBlock: 0, toBlock: 'latest' })\r\n\r\n// Format order stream\r\n    const allOrders = orderStream.map((event) => event.returnValues)\r\n\r\n// Add trade orders to the redux store\r\n    dispatch(allOrdersLoaded(allOrders)) // adding to the Redux state\r\n }"],"mappings":"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"},"metadata":{},"sourceType":"module"}