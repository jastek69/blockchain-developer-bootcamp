{"version":3,"sources":["helpers.js","store/selectors.js","components/Navbar.js","store/actions.js","store/interactions.js","components/Spinner.js","components/OrderBook.js","components/Trades.js","components/MyTransactions.js","components/PriceChart.config.js","components/PriceChart.js","components/Balance.js","components/NewOrder.js","components/Content.js","components/App.js","store/reducers.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["ETHER_ADDRESS","GREEN","RED","DECIMALS","Math","pow","ether","wei","tokens","formatBalance","balance","round","account","state","get","accountSelector","createSelector","a","web3Selector","w","tokenLoaded","tokenSelector","tl","t","exchangeLoaded","exchangeSelector","el","e","contractsLoadedSelector","cancelledOrdersLoaded","cancelledOrders","loaded","filledOrdersLoaded","o","filledOrdersLoadedSelector","filledOrders","filledOrdersSelector","orders","sort","b","timestamp","decorateFilledOrders","previousOrder","map","order","decorateOrder","decorateFilledOrder","etherAmount","tokenAmount","tokenGive","amountGive","amountGet","tokenPrice","Object","objectSpread","formattedTimestamp","moment","unix","format","tokenPriceClass","id","orderId","openOrders","all","allOrders","filled","cancelled","reject","orderFilled","some","orderCancelled","orderBookLoaded","allOrdersLoaded","orderBookLoadedSelector","orderBookSelector","decorateOrderBookOrders","groupBy","buyOrders","sellOrders","decorateOrderBookOrder","orderType","orderTypeClass","orderFillAction","myFilledOrdersLoadedSelector","myFilledOrdersSelector","filter","user","userFill","decorateMyFilledOrders","decorateMyFilledOrder","orderSign","myOpenOrdersLoadedSelector","myOpenOrdersSelector","decorateMyOpenOrders","decorateMyOpenOrder","priceChartLoadedSelector","priceChartSelector","secondLastOrder","lastOrder","_orders$slice","slice","length","_orders$slice2","slicedToArray","lastPrice","lastPriceChange","series","data","buildGraphData","startOf","keys","hour","group","open","high","maxBy","low","minBy","close","x","Date","y","orderCancellingSelector","status","orderFillingSelector","balancesLoadingSelector","etherBalanceSelector","tokenBalanceSelector","exchangeEtherBalanceSelector","exchangeTokenBalanceSelector","etherDepositAmountSelector","amount","etherWithdrawAmountSelector","tokenDepositAmountSelector","tokenWithdrawAmountSelector","buyOrderSelector","sellOrderSelector","Navbar","react_default","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","concat","this","props","target","rel","Component","connect","web3AccountLoaded","tokenBalanceLoaded","exchangeEtherBalanceLoaded","exchangeTokenBalanceLoaded","loadWeb3","dispatch","web3","Web3","window","ethereum","connection","loadAccount","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","accounts","wrap","_context","prev","next","request","method","sent","utils","toChecksumAddress","abrupt","stop","_x","_x2","apply","arguments","loadToken","_ref2","_callee2","networkId","token","_context2","eth","Contract","Token","abi","networks","address","contract","t0","console","log","_x3","_x4","_x5","loadExchange","_ref3","_callee3","exchange","_context3","Exchange","_x6","_x7","_x8","loadAllOrders","_ref4","_callee4","cancelStream","tradeStream","orderStream","_context4","getPastEvents","fromBlock","toBlock","event","returnValues","_x9","_x10","subscribeToEvents","_ref5","_callee5","_context5","events","Cancel","error","Trade","Deposit","Withdraw","Order","_x11","_x12","loadBalances","_ref6","_callee6","etherBalance","tokenBalance","exchangeEtherBalance","exchangeTokenBalance","_context6","getBalance","methods","balanceOf","call","options","alert","_x13","_x14","_x15","_x16","_x17","Spinner","renderOrder","OverlayTrigger","key","placement","overlay","Tooltip","onClick","fillOrder","send","from","on","hash","OrderBook","showOrderBook","orderBook","orderFilling","Trades","showMyOpenOrders","myOpenOrders","cancelOrder","MyTransactions","Tabs","defaultActiveKey","Tab","eventKey","title","showMyFilledOrders","myFilledOrders","myOpenOrdersLoaded","orderCancelling","chartOptions","chart","animations","enabled","toolbar","show","width","tooltip","theme","style","fontSize","fontFamily","undefined","formatter","marker","items","display","fixed","position","offsetX","offsetY","xaxis","labels","colors","cssClass","yaxis","minWidth","maxWidth","color","rotate","showPriceChart","priceChart","react_apexcharts_min_default","height","PriceChart","priceChartLoaded","showForm","etherDepositAmount","tokenDepositAmount","etherWithdrawAmount","tokenWithdrawAmount","onSubmit","preventDefault","depositEther","value","toWei","placeholder","onChange","required","approve","depositToken","withdrawEther","withdrawToken","Balance","loadBlockchainData","balancesLoading","buyOrder","sellOrder","showBuyTotal","showSellTotal","tokenGet","price","toString","makeOrder","makeBuyOrder","makeSellOrder","NewOrder","making","Content","components_Balance","components_NewOrder","components_OrderBook","components_PriceChart","components_MyTransactions","components_Trades","App","net","getId","components_Navbar","contractsLoaded","components_Content","rootReducer","combineReducers","action","toConsumableArray","findIndex","loggerMiddleware","createLogger","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preloadedState","Boolean","location","hostname","match","ReactDOM","render","es","store","createStore","applyMiddleware","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u0iaAAaA,EAAgB,6CAChBC,EAAQ,UACRC,EAAM,SAENC,EAAQC,KAAAC,IAAI,GAAI,IAIhBC,EAAQ,SAACC,GAClB,GAAGA,EACC,OAAOA,EAAMJ,GAKRK,EAASF,ECPTG,EAAgB,SAACC,GAMzB,OAHAA,EAAUJ,EAAMI,GAChBA,EAAUN,KAAKO,MAHG,IAGGD,GAHH,KASjBE,EAAU,SAAAC,GAAK,OAAIC,cAAID,EAAO,iBACvBE,EAAkBC,YAAeJ,EAAS,SAAAK,GAAC,OAAIA,IAG/CC,EAAeF,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,oBACgB,SAAAM,GAAC,OAAIA,IAEhDC,EAAc,SAAAP,GAAK,OAAIC,cAAID,EAAO,gBAAgB,IAI3CQ,GAHsBL,YAAeI,EAAa,SAAAE,GAAE,OAAIA,IAGxCN,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,mBACiB,SAAAU,GAAC,OAAIA,KAElDC,EAAiB,SAAAX,GAAK,OAAIC,cAAID,EAAO,mBAAmB,IAIjDY,GAHyBT,YAAeQ,EAAgB,SAAAE,GAAE,OAAIA,IAG3CV,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,sBACoB,SAAAc,GAAC,OAAIA,KAEjDC,EAA0BZ,YACnCI,EACAI,EACA,SAACF,EAAII,GAAL,OAAaJ,GAAMI,IAQjBG,EAAwB,SAAAhB,GAAK,OAAIC,cAAID,EAAO,mCAAmC,IAG/EiB,GAFuCd,YAAea,EAAuB,SAAAE,GAAM,OAAIA,IAErE,SAAAlB,GAAK,OAAIC,cAAID,EAAO,gCAAiC,MAIvEmB,GAHiChB,YAAec,EAAiB,SAAAG,GAAC,OAAIA,IAGjD,SAAApB,GAAK,OAAIC,cAAID,EAAO,gCAAgC,KAClEqB,EAA6BlB,YAAegB,EAAoB,SAAAD,GAAM,OAAIA,IAGjFI,EAAe,SAAAtB,GAAK,OAAIC,cAAID,EAAO,6BAA8B,KAC1DuB,EAAuBpB,YAChCmB,EACA,SAACE,GAUG,OAPAA,EAASA,EAAOC,KAAK,SAACrB,EAAEsB,GAAH,OAAStB,EAAEuB,UAAYD,EAAEC,YAM9CH,GAHAA,EAASI,EAAqBJ,IAGdC,KAAK,SAACrB,EAAEsB,GAAH,OAASA,EAAEC,UAAYvB,EAAEuB,cAMhDC,EAAuB,SAACJ,GAE1B,IAAIK,EAAgBL,EAAO,GAC3B,OACEA,EAAOM,IAAI,SAACC,GAIR,OAHAA,EAAQC,EAAcD,GACtBA,EAAQE,EAAoBF,EAAOF,GACnCA,EAAgBE,EACTA,KAKXC,EAAgB,SAACD,GACnB,IAAIG,EACAC,EAGDJ,EAAMK,YAAcjD,GACnB+C,EAAcH,EAAMM,WACpBF,EAAcJ,EAAMO,YAEpBJ,EAAcH,EAAMO,UACpBH,EAAcJ,EAAMM,YAKxB,IACIE,EAAcL,EAAcC,EAIhC,OAHAI,EAAahD,KAAKO,MAFA,IAEMyC,GAFN,IAKlBC,OAAAC,EAAA,EAAAD,CAAA,GACKT,EADL,CAEEG,YAAazC,EAAMyC,GACnBC,YAAaxC,EAAOwC,GACpBI,aACAG,mBAAoBC,IAAOC,KAAKb,EAAMJ,WAAWkB,OAAO,oBAIxDZ,EAAsB,SAACF,EAAOF,GAChC,OAAAW,OAAAC,EAAA,EAAAD,CAAA,GACOT,EADP,CAEIe,gBAAiBA,EAAgBf,EAAMQ,WAAYR,EAAMgB,GAAIlB,MAI/DiB,EAAkB,SAACP,EAAYS,EAASnB,GAE1C,OAAGA,EAAckB,KAAOC,EACb5D,EAKRyC,EAAcU,YAAcA,EACpBnD,EAEAC,GAIT4D,EAAa,SAAAjD,GACf,IAAMkD,EAjGQ,SAAAlD,GAAK,OAAIC,cAAID,EAAO,0BAA2B,IAiGjDmD,CAAUnD,GAChBoD,EAAS9B,EAAatB,GACtBqD,EAAYpC,EAAgBjB,GAE5BiD,EAAaK,iBAAOJ,EAAK,SAACnB,GAC5B,IAAMwB,EAAcH,EAAOI,KAAK,SAACpC,GAAD,OAAOA,EAAE2B,KAAOhB,EAAMgB,KAChDU,EAAiBJ,EAAUG,KAAK,SAACpC,GAAD,OAAOA,EAAE2B,KAAOhB,EAAMgB,KAC5D,OAAOQ,GAAeE,IAG1B,OAAOR,GAOLS,EAAkB,SAAA1D,GAAK,OAAIgB,EAAsBhB,IAAUmB,EAAmBnB,IAnH5D,SAAAA,GAAK,OAAIC,cAAID,EAAO,6BAA6B,GAmHqB2D,CAAgB3D,IACjG4D,EAA0BzD,YAAeuD,EAAiB,SAAAxC,GAAM,OAAIA,IAGpE2C,EAAoB1D,YAC7B8C,EACA,SAACzB,GAEGA,EAASsC,EAAwBtC,GAGjCA,EAASuC,kBAAQvC,EAAQ,aAGzB,IAAMwC,EAAY/D,cAAIuB,EAAQ,MAAO,IAGrCA,EAAMgB,OAAAC,EAAA,EAAAD,CAAA,GACChB,EADD,CAEFwC,UAAWA,EAAUvC,KAAK,SAACrB,EAAEsB,GAAH,OAASA,EAAEa,WAAanC,EAAEmC,eAIxD,IAAM0B,EAAahE,cAAIuB,EAAQ,OAAQ,IAOvC,OAJAA,EAAMgB,OAAAC,EAAA,EAAAD,CAAA,GACChB,EADD,CAEFyC,WAAYA,EAAWxC,KAAK,SAACrB,EAAEsB,GAAH,OAASA,EAAEa,WAAanC,EAAEmC,iBAM5DuB,EAA0B,SAACtC,GAC7B,OACIA,EAAOM,IAAI,SAACC,GAIR,OAHAA,EAAQC,EAAcD,GACtBA,EAAQmC,EAAuBnC,MAOrCmC,EAAyB,SAACnC,GAC5B,IAAMoC,EAAYpC,EAAMK,YAAcjD,EAAgB,MAAQ,OAC9D,OAAAqD,OAAAC,EAAA,EAAAD,CAAA,GACOT,EADP,CAEIoC,YACAC,eAA+B,QAAdD,EAAsB/E,EAAQC,EAC/CgF,gBAA+B,QAAdF,EAAsB,OAAS,SAO3CG,EAA+BnE,YAAegB,EAAoB,SAAAD,GAAM,OAAIA,IAE5EqD,EAAyBpE,YAClCJ,EACAuB,EACA,SAACvB,EAASyB,GASN,OAJAA,GAHAA,EAASA,EAAOgD,OAAO,SAACpD,GAAD,OAAOA,EAAEqD,OAAS1E,GAAWqB,EAAEsD,WAAa3E,KAGnD0B,KAAK,SAACrB,EAAEsB,GAAH,OAAStB,EAAEuB,UAAYD,EAAEC,YAG9CH,EAASmD,EAAuBnD,EAAQzB,KAM1C4E,EAAyB,SAACnD,EAAQzB,GACpC,OACIyB,EAAOM,IAAI,SAACC,GAGR,OAFAA,EAAQC,EAAcD,GACtBA,EAAQ6C,GAAsB7C,EAAOhC,MAO3C6E,GAAwB,SAAC7C,EAAOhC,GAClC,IAEIoE,EAOJ,OALIA,EAJYpC,EAAM0C,OAAS1E,EAIfgC,EAAMK,YAAcjD,EAAgB,MAAQ,OAE5C4C,EAAMK,YAAcjD,EAAgB,OAAS,MAG7DqD,OAAAC,EAAA,EAAAD,CAAA,GACOT,EADP,CAEIoC,YACAC,eAA+B,QAAdD,EAAsB/E,EAAQC,EAC/CwF,UAA0B,QAAdV,EAAsB,IAAM,OAKnCW,GAA6B3E,YAAeuD,EAAiB,SAAAxC,GAAM,OAAIA,IAEvE6D,GAAuB5E,YAChCJ,EACAkD,EACA,SAAClD,EAASyB,GAeN,OAXAA,EAASA,EAAOgD,OAAO,SAACpD,GAAD,OAAOA,EAAEqD,OAAS1E,IASzCyB,GALAA,EAASwD,GAAqBxD,IAKdC,KAAK,SAACrB,EAAEsB,GAAH,OAASA,EAAEC,UAAYvB,EAAEuB,cAOhDqD,GAAuB,SAACxD,EAAQzB,GAClC,OACIyB,EAAOM,IAAI,SAACC,GAGR,OAFAA,EAAQC,EAAcD,GACtBA,EAAQkD,GAAoBlD,EAAOhC,MAOzCkF,GAAsB,SAAClD,EAAOhC,GAChC,IAAIoE,EAAYpC,EAAMK,YAAcjD,EAAgB,MAAQ,OAE5D,OAAAqD,OAAAC,EAAA,EAAAD,CAAA,GACOT,EADP,CAEIoC,YACAC,eAA+B,QAAdD,EAAsB/E,EAAQC,KAK1C6F,GAA2B/E,YAAegB,EAAoB,SAAAD,GAAM,OAAIA,IAExEiE,GAAqBhF,YAC9BmB,EACA,SAACE,GAQG,IAAI4D,EAAiBC,EARbC,GAKR9D,GAHAA,EAASA,EAAOC,KAAK,SAACrB,EAAEsB,GAAH,OAAStB,EAAEuB,UAAYD,EAAEC,aAG9BG,IAAI,SAACV,GAAD,OAAOY,EAAcZ,MAIHmE,MAAM/D,EAAOgE,OAAS,EAAGhE,EAAOgE,QAT9DC,EAAAjD,OAAAkD,EAAA,EAAAlD,CAAA8C,EAAA,GASPF,EATOK,EAAA,GASUJ,EATVI,EAAA,GAYR,IAAME,EAAY1F,cAAIoF,EAAW,aAAc,GAK/C,MAAO,CACHM,YACAC,gBAAkBD,GAJE1F,cAAImF,EAAiB,aAAc,GAIN,IAAM,IACvDS,OAAQ,CAAC,CACLC,KAAMC,GAAevE,QAM/BuE,GAAiB,SAACvE,GAyBpB,OAvBAA,EAASuC,kBAAQvC,EAAQ,SAACJ,GAAD,OAAOuB,IAAOC,KAAKxB,EAAEO,WAAWqE,QAAQ,QAAQnD,WAG3DL,OAAOyD,KAAKzE,GAGFM,IAAI,SAACoE,GAGzB,IAAMC,EAAQ3E,EAAO0E,GAGfE,EAAOD,EAAM,GACbE,EAAOC,gBAAMH,EAAO,cACpBI,EAAMC,gBAAML,EAAO,cACnBM,EAAQN,EAAMA,EAAMX,OAAQ,GAElC,MAAO,CACHkB,EAAG,IAAIC,KAAKT,GACZU,EAAG,CAACR,EAAK7D,WAAY8D,EAAK9D,WAAYgE,EAAIhE,WAAYkE,EAAMlE,gBAQ3DsE,GAA0B1G,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,4BAA4B,IACD,SAAA8G,GAAM,OAAIA,IAGpEC,GAAuB5G,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,yBAAyB,IACD,SAAA8G,GAAM,OAAIA,IAK9DE,GAA0B7G,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,4BAA4B,IACD,SAAA8G,GAAM,OAAIA,IAGpEG,GAAuB9G,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,eAAgB,IAGrD,SAACH,GACG,OAAOD,EAAcC,KAKhBqH,GAAuB/G,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,gBAAiB,IAGtD,SAACH,GACG,OAAOD,EAAcC,KAKhBsH,GAA+BhH,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,wBAAyB,IAGtE,SAACH,GACG,OAAOD,EAAcC,KAKhBuH,GAA+BjH,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,wBAAyB,IAGtE,SAACH,GACG,OAAOD,EAAcC,KAMhBwH,GAA6BlH,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,8BAA+B,OACD,SAAAsH,GAAM,OAAIA,IAI1EC,GAA8BpH,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,+BAAgC,OACD,SAAAsH,GAAM,OAAIA,IAG5EE,GAA6BrH,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,8BAA+B,OACD,SAAAsH,GAAM,OAAIA,IAG1EG,GAA8BtH,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,+BAAgC,OACD,SAAAsH,GAAM,OAAIA,IAG5EI,GAAmBvH,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,oBAAqB,KACD,SAAA+B,GAAK,OAAIA,IAIrD4F,GAAoBxH,YADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,qBAAsB,KACD,SAAA+B,GAAK,OAAIA,IC7a9D6F,oLAEF,OACEC,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,kDACbF,EAAAzH,EAAA0H,cAAA,KAAGC,UAAU,eAAeC,KAAK,MAAjC,8BACAH,EAAAzH,EAAA0H,cAAA,UAAQC,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,qBAAqBC,gBAAc,oBAAoBC,gBAAc,QAAQC,aAAW,qBAC1KT,EAAAzH,EAAA0H,cAAA,QAAMC,UAAU,yBAElBF,EAAAzH,EAAA0H,cAAA,MAAIC,UAAU,sBACZF,EAAAzH,EAAA0H,cAAA,MAAIC,UAAU,YACZF,EAAAzH,EAAA0H,cAAA,KACEC,UAAU,iBACVC,KAAI,gCAAAO,OAAkCC,KAAKC,MAAM1I,SACjD2I,OAAO,SACPC,IAAI,uBAEHH,KAAKC,MAAM1I,mBAhBL6I,aA+BNC,mBANf,SAAyB7I,GACvB,MAAO,CACLD,QAASG,EAAgBF,KAId6I,CAAyBjB,yBCzBjC,SAASkB,GAAkB/I,GAC9B,MAAO,CACHkI,KAAM,sBACNlI,WAoBD,SAASiB,GAAsBC,GAClC,MAAO,CACHgH,KAAM,0BACNhH,mBAID,SAASE,GAAmBG,GAC/B,MAAO,CACH2G,KAAM,uBACN3G,gBAID,SAASqC,GAAgBR,GAC5B,MAAO,CACH8E,KAAM,oBACN9E,aA2CD,SAAS4F,GAAmBlJ,GAC/B,MAAM,CACFoI,KAAM,uBACNpI,WAID,SAASmJ,GAA2BnJ,GACvC,MAAM,CACFoI,KAAM,gCACNpI,WAID,SAASoJ,GAA2BpJ,GACvC,MAAM,CACFoI,KAAM,gCACNpI,szMClFD,IAAMqJ,GAAW,SAACC,GAEtB,IAAMC,EAAO,IAAIC,KAAKC,OAAOC,UAAY,yBAExC,OADDJ,ED3BQ,CACHlB,KAAM,cACNuB,WCyBeJ,IACZA,GAIEK,GAAW,eAAAC,EAAAlH,OAAAmH,EAAA,EAAAnH,CAAAoH,KAAAC,KAAG,SAAAC,EAAOV,EAAMD,GAAb,IAAAY,EAAAhK,EAAA,OAAA6J,KAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACAb,OAAOC,SAASa,QAAQ,CAAEC,OAAQ,wBADlC,cACjBN,EADiBE,EAAAK,KAEjBvK,EAAUqJ,EAAKmB,MAAMC,kBAAkBT,EAAS,IAItDZ,EAASL,GAAkB/I,IANJkK,EAAAQ,OAAA,SAOhB1K,GAPgB,wBAAAkK,EAAAS,SAAAZ,MAAH,gBAAAa,EAAAC,GAAA,OAAAlB,EAAAmB,MAAArC,KAAAsC,YAAA,GAgCXC,GAAS,eAAAC,EAAAxI,OAAAmH,EAAA,EAAAnH,CAAAoH,KAAAC,KAAG,SAAAoB,EAAO7B,EAAM8B,EAAW/B,GAAxB,IAAAgC,EAAA,OAAAvB,KAAAI,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAlB,KAAA,EAEXiB,EAAQ,IAAI/B,EAAKiC,IAAIC,SAASC,GAAMC,IAAKD,GAAME,SAASP,GAAWQ,SACzEvC,EDpDG,CACHlB,KAAM,eACN0D,SCkDqBR,IAHJC,EAAAX,OAAA,SAIVU,GAJU,cAAAC,EAAAlB,KAAA,EAAAkB,EAAAQ,GAAAR,EAAA,SAMnBS,QAAQC,IAAI,8FANOV,EAAAX,OAAA,SAOZ,MAPY,yBAAAW,EAAAV,SAAAO,EAAA,iBAAH,gBAAAc,EAAAC,EAAAC,GAAA,OAAAjB,EAAAH,MAAArC,KAAAsC,YAAA,GAYToB,GAAY,eAAAC,EAAA3J,OAAAmH,EAAA,EAAAnH,CAAAoH,KAAAC,KAAG,SAAAuC,EAAOhD,EAAM8B,EAAW/B,GAAxB,IAAAkD,EAAA,OAAAzC,KAAAI,KAAA,SAAAsC,GAAA,cAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,cAAAmC,EAAApC,KAAA,EAEdmC,EAAW,IAAIjD,EAAKiC,IAAIC,SAASiB,GAASf,IAAKe,GAASd,SAASP,GAAWQ,SAClFvC,EDxDG,CACHlB,KAAM,kBACN0D,SCsDwBU,IAHJC,EAAA7B,OAAA,SAIb4B,GAJa,cAAAC,EAAApC,KAAA,EAAAoC,EAAAV,GAAAU,EAAA,SAMtBT,QAAQC,IAAI,8FANUQ,EAAA7B,OAAA,SAOf,MAPe,yBAAA6B,EAAA5B,SAAA0B,EAAA,iBAAH,gBAAAI,EAAAC,EAAAC,GAAA,OAAAP,EAAAtB,MAAArC,KAAAsC,YAAA,GAYZ6B,GAAa,eAAAC,EAAApK,OAAAmH,EAAA,EAAAnH,CAAAoH,KAAAC,KAAG,SAAAgD,EAAMR,EAAUlD,GAAhB,IAAA2D,EAAA7L,EAAA8L,EAAAzL,EAAA0L,EAAA7J,EAAA,OAAAyG,KAAAI,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cAAA8C,EAAA9C,KAAA,EAEEkC,EAASa,cAAc,SAAU,CAAEC,UAAW,EAAGC,QAAS,WAF5D,cAEnBN,EAFmBG,EAAA3C,KAKnBrJ,EAAkB6L,EAAahL,IAAI,SAACuL,GAAD,OAAWA,EAAMC,eAG1DnE,EAASnI,GAAsBC,IARNgM,EAAA9C,KAAA,EAWCkC,EAASa,cAAc,QAAS,CAAEC,UAAW,EAAGC,QAAS,WAX1D,cAWnBL,EAXmBE,EAAA3C,KAcnBhJ,EAAeyL,EAAYjL,IAAI,SAACuL,GAAD,OAAWA,EAAMC,eAGtDnE,EAAShI,GAAmBG,IAjBH2L,EAAA9C,KAAA,GAoBCkC,EAASa,cAAc,QAAS,CAAEC,UAAW,EAAGC,QAAS,WApB1D,QAoBnBJ,EApBmBC,EAAA3C,KAuBnBnH,EAAY6J,EAAYlL,IAAI,SAACuL,GAAD,OAAWA,EAAMC,eAGnDnE,EAASxF,GAAgBR,IA1BA,yBAAA8J,EAAAvC,SAAAmC,MAAH,gBAAAU,EAAAC,GAAA,OAAAZ,EAAA/B,MAAArC,KAAAsC,YAAA,GA+Bb2C,GAAiB,eAAAC,EAAAlL,OAAAmH,EAAA,EAAAnH,CAAAoH,KAAAC,KAAG,SAAA8D,EAAOtB,EAAUlD,GAAjB,OAAAS,KAAAI,KAAA,SAAA4D,GAAA,cAAAA,EAAA1D,KAAA0D,EAAAzD,MAAA,OAC7BkC,EAASwB,OAAOC,OAAO,GAAI,SAACC,EAAOV,GAC/BlE,ED9DG,CACHlB,KAAM,kBACNlG,MC4DwBsL,EAAMC,iBAGlCjB,EAASwB,OAAOG,MAAM,GAAI,SAACD,EAAOV,GAC9BlE,EDlDG,CACHlB,KAAM,eACNlG,MCgDqBsL,EAAMC,iBAG/BjB,EAASwB,OAAOI,QAAQ,GAAI,SAACF,EAAOV,GAChClE,EDjBE,CACFlB,KAAM,sBCmBXoE,EAASwB,OAAOK,SAAS,GAAI,SAACH,EAAOV,GAChClE,EDrBE,CACFlB,KAAM,sBCuBVoE,EAASwB,OAAOM,MAAM,GAAI,SAACJ,EAAOV,GAC9BlE,ED2CG,CACHlB,KAAM,aACNlG,MC7CmBsL,EAAMC,iBAlBA,wBAAAM,EAAAlD,SAAAiD,MAAH,gBAAAS,EAAAC,GAAA,OAAAX,EAAA7C,MAAArC,KAAAsC,YAAA,GAgDjBwD,GAAY,eAAAC,EAAA/L,OAAAmH,EAAA,EAAAnH,CAAAoH,KAAAC,KAAG,SAAA2E,EAAOrF,EAAUC,EAAMiD,EAAUlB,EAAOpL,GAAxC,IAAA0O,EAAAC,EAAAC,EAAAC,EAAA,OAAAhF,KAAAI,KAAA,SAAA6E,GAAA,cAAAA,EAAA3E,KAAA2E,EAAA1E,MAAA,UACE,qBAAZpK,EADU,CAAA8O,EAAA1E,KAAA,gBAAA0E,EAAA1E,KAAA,EAGWf,EAAKiC,IAAIyD,WAAW/O,GAH/B,cAGV0O,EAHUI,EAAAvE,KAIhBnB,EDxFF,CACFlB,KAAM,uBACNpI,QCsFgC4O,IAJZI,EAAA1E,KAAA,EAOWgB,EAAM4D,QAAQC,UAAUjP,GAASkP,OAP5C,cAOVP,EAPUG,EAAAvE,KAQhBnB,EAASJ,GAAmB2F,IARZG,EAAA1E,KAAA,GAWmBkC,EAAS0C,QAAQC,UAAU7P,EAAeY,GAASkP,OAXtE,eAWVN,EAXUE,EAAAvE,KAYhBnB,EAASH,GAA2B2F,IAZpBE,EAAA1E,KAAA,GAemBkC,EAAS0C,QAAQC,UAAU7D,EAAM+D,QAAQxD,QAAS3L,GAASkP,OAf9E,QAeVL,EAfUC,EAAAvE,KAgBhBnB,EAASF,GAA2B2F,IAGpCzF,ED1EF,CACFlB,KAAM,oBCsDc4G,EAAA1E,KAAA,iBAqBhBb,OAAO6F,MAAM,8BArBG,yBAAAN,EAAAnE,SAAA8D,MAAH,gBAAAY,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,OAAAjB,EAAA1D,MAAArC,KAAAsC,YAAA,uBCzKV2E,GAAA,SAAA/F,GACX,MAAa,UADkBA,EAARzB,KAEZJ,EAAAzH,EAAA0H,cAAA,SAAOC,UAAU,0CAEjBF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,2CCOxB2H,GAAc,SAAC3N,EAAO0G,GAAU,IAC5BU,EAAgCV,EAAhCU,SAAUkD,EAAsB5D,EAAtB4D,SAAUtM,EAAY0I,EAAZ1I,QAE5B,OACI8H,EAAAzH,EAAA0H,cAAC6H,GAAA,EAAD,CACEC,IAAK7N,EAAMgB,GACX8M,UAAU,OACNC,QACAjI,EAAAzH,EAAA0H,cAACiI,GAAA,EAAD,CAAShN,GAAIhB,EAAMgB,IAAnB,iBAAAwF,OACoBxG,EAAMsC,mBAI5BwD,EAAAzH,EAAA0H,cAAA,MACE8H,IAAK7N,EAAMgB,GACXgF,UAAU,mBACViI,QAAS,SAAClP,GAAD,OFkII,SAACqI,EAAUkD,EAAUtK,EAAOhC,GAC7CsM,EAAS0C,QAAQkB,UAAUlO,EAAMgB,IAAImN,KAAK,CAAEC,KAAMpQ,IACjDqQ,GAAG,kBAAmB,SAACC,GACpBlH,ED1FD,CACHlB,KAAM,oBC2FLmI,GAAG,QAAS,SAACrC,GACVlC,QAAQC,IAAIiC,GACZzE,OAAO6F,MAAM,yBEzIGc,CAAU9G,EAAUkD,EAAUtK,EAAOhC,KAGrD8H,EAAAzH,EAAA0H,cAAA,UAAK/F,EAAMI,aACX0F,EAAAzH,EAAA0H,cAAA,MAAIC,UAAS,QAAAQ,OAAUxG,EAAMqC,iBAAmBrC,EAAMQ,YACtDsF,EAAAzH,EAAA0H,cAAA,UAAK/F,EAAMG,gBAsBjBoO,oLAEE,OACEzI,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,YACbF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,2BACbF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,eAAf,cAGAF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,aACbF,EAAAzH,EAAA0H,cAAA,SAAOC,UAAU,mCACbS,KAAKC,MAAM8H,cA1BT,SAAC9H,GAAU,IACrB+H,EAAc/H,EAAd+H,UAER,OACI3I,EAAAzH,EAAA0H,cAAA,aACK0I,EAAUvM,WAAWnC,IAAI,SAACC,GAAD,OAAW2N,GAAY3N,EAAO0G,KACxDZ,EAAAzH,EAAA0H,cAAA,UACID,EAAAzH,EAAA0H,cAAA,kBACAD,EAAAzH,EAAA0H,cAAA,sBACAD,EAAAzH,EAAA0H,cAAA,kBAEH0I,EAAUxM,UAAUlC,IAAI,SAACC,GAAD,OAAW2N,GAAY3N,EAAO0G,MAepB8H,CAAc/H,KAAKC,OAASZ,EAAAzH,EAAA0H,cAAC2H,GAAD,CAASxH,KAAK,qBAVjEW,aAgCTC,mBAZf,SAAyB7I,GACvB,IAAM0D,EAAkBE,EAAwB5D,GAC1CyQ,EAAe1J,GAAqB/G,GAE1C,MAAO,CACHwQ,UAAW3M,EAAkB7D,GAC7BuQ,cAAe7M,IAAoB+M,EACnCpE,SAAUzL,EAAiBZ,GAC3BD,QAASG,EAAgBF,KAIhB6I,CAAyByH,IChElCI,oLAEE,OACE7I,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,YACbF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,2BACbF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,eAAf,UAGAF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,aACbF,EAAAzH,EAAA0H,cAAA,SAAOC,UAAU,mCACfF,EAAAzH,EAAA0H,cAAA,aACED,EAAAzH,EAAA0H,cAAA,UACED,EAAAzH,EAAA0H,cAAA,kBACAD,EAAAzH,EAAA0H,cAAA,kBACAD,EAAAzH,EAAA0H,cAAA,wBAGFU,KAAKC,MAAMtH,oBAjCLG,EAiC2CkH,KAAKC,MAAMnH,aA/BxEuG,EAAAzH,EAAA0H,cAAA,aACIxG,EAAaQ,IAAI,SAACC,GAClB,OACE8F,EAAAzH,EAAA0H,cAAA,MAAIC,UAAS,SAAAQ,OAAWxG,EAAMgB,IAAM6M,IAAK7N,EAAMgB,IAC7C8E,EAAAzH,EAAA0H,cAAA,MAAIC,UAAU,cAAchG,EAAMW,oBAClCmF,EAAAzH,EAAA0H,cAAA,UAAK/F,EAAMI,aACX0F,EAAAzH,EAAA0H,cAAA,MAAIC,UAAS,QAAAQ,OAAUxG,EAAMe,kBAAoBf,EAAMQ,iBAyByBsF,EAAAzH,EAAA0H,cAAC2H,GAAD,CAASxH,KAAK,cAjCrF,IAAC3G,SAgBLsH,aAkCNC,mBAPf,SAAyB7I,GACvB,MAAO,CACHmB,mBAAoBE,EAA2BrB,GAC/CsB,aAAcC,EAAqBvB,KAI1B6I,CAAyB6H,wBCzBlCC,GAAmB,SAAClI,GAAU,IACxBmI,EAA8CnI,EAA9CmI,aAAczH,EAAgCV,EAAhCU,SAAUkD,EAAsB5D,EAAtB4D,SAAUtM,EAAY0I,EAAZ1I,QAE1C,OACI8H,EAAAzH,EAAA0H,cAAA,aACM8I,EAAa9O,IAAI,SAACC,GAChB,OACI8F,EAAAzH,EAAA0H,cAAA,MAAI8H,IAAK7N,EAAMgB,IACX8E,EAAAzH,EAAA0H,cAAA,MAAIC,UAAS,QAAAQ,OAAUxG,EAAMqC,iBAAmBrC,EAAMI,aACtD0F,EAAAzH,EAAA0H,cAAA,MAAIC,UAAS,QAAAQ,OAAUxG,EAAMqC,iBAAmBrC,EAAMQ,YACtDsF,EAAAzH,EAAA0H,cAAA,MACIC,UAAU,0BACViI,QAAS,SAAClP,IJqGX,SAACqI,EAAUkD,EAAUtK,EAAOhC,GAEnDsM,EAAS0C,QAAQ8B,YAAY9O,EAAMgB,IAAImN,KAAK,CAAEC,KAAMpQ,IACnDqQ,GAAG,kBAAmB,SAACC,GACpBlH,ED9FG,CACHlB,KAAM,uBC+FTmI,GAAG,QAAS,SAACrC,GACVlC,QAAQC,IAAIiC,GACZzE,OAAO6F,MAAM,yBI5GW0B,CAAY1H,EAAUkD,EAAUtK,EAAOhC,KAH/C,UAclB+Q,oLAEE,OACIjJ,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,2BACXF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,eAAf,mBAGAF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,aACXF,EAAAzH,EAAA0H,cAACiJ,GAAA,EAAD,CAAMC,iBAAiB,SAASjJ,UAAU,sBACtCF,EAAAzH,EAAA0H,cAACmJ,GAAA,EAAD,CAAKC,SAAS,SAASC,MAAM,SAASpJ,UAAU,WAC5CF,EAAAzH,EAAA0H,cAAA,SAAOC,UAAU,mCACbF,EAAAzH,EAAA0H,cAAA,aACID,EAAAzH,EAAA0H,cAAA,UACID,EAAAzH,EAAA0H,cAAA,kBACAD,EAAAzH,EAAA0H,cAAA,kBACAD,EAAAzH,EAAA0H,cAAA,wBAGJU,KAAKC,MAAM2I,mBA5DpB,SAAC3I,GAAU,IAC1B4I,EAAmB5I,EAAnB4I,eAER,OACIxJ,EAAAzH,EAAA0H,cAAA,aACMuJ,EAAevP,IAAI,SAACC,GAClB,OACI8F,EAAAzH,EAAA0H,cAAA,MAAI8H,IAAK7N,EAAMgB,IACX8E,EAAAzH,EAAA0H,cAAA,MAAIC,UAAU,cAAchG,EAAMW,oBAClCmF,EAAAzH,EAAA0H,cAAA,MAAIC,UAAS,QAAAQ,OAAUxG,EAAMqC,iBAAmBrC,EAAM8C,UAAW9C,EAAMI,aACvE0F,EAAAzH,EAAA0H,cAAA,MAAIC,UAAS,QAAAQ,OAAUxG,EAAMqC,iBAAmBrC,EAAMQ,gBAkDV6O,CAAmB5I,KAAKC,OAASZ,EAAAzH,EAAA0H,cAAC2H,GAAD,CAASxH,KAAK,YAG/FJ,EAAAzH,EAAA0H,cAACmJ,GAAA,EAAD,CAAKC,SAAS,SAASC,MAAM,UACzBtJ,EAAAzH,EAAA0H,cAAA,SAAOC,UAAU,mCACbF,EAAAzH,EAAA0H,cAAA,aACID,EAAAzH,EAAA0H,cAAA,UACID,EAAAzH,EAAA0H,cAAA,oBACAD,EAAAzH,EAAA0H,cAAA,sBACAD,EAAAzH,EAAA0H,cAAA,sBAGNU,KAAKC,MAAMkI,iBAAmBA,GAAiBnI,KAAKC,OAASZ,EAAAzH,EAAA0H,cAAC2H,GAAD,CAASxH,KAAK,sBA9B5EW,aAuDdC,mBAdf,SAAyB7I,GACrB,IAAMsR,EAAoBxM,GAA2B9E,GAC/CuR,EAAkB1K,GAAwB7G,GAEhD,MAAO,CACHqR,eAAgB9M,EAAuBvE,GACvCoR,mBAAoB9M,EAA6BtE,GACjD4Q,aAAc7L,GAAqB/E,GACnC2Q,iBAAkBW,IAAuBC,EACzClF,SAAUzL,EAAiBZ,GAC3BD,QAASG,EAAgBF,KAIlB6I,CAAyBiI,yBChH3BU,GAAe,CACxBC,MAAO,CACLC,WAAY,CAAEC,SAAS,GACvBC,QAAS,CAAEC,MAAM,GACjBC,MAAO,SAETC,QAAS,CACPJ,SAAS,EACTK,OAAO,EACPC,MAAO,CACLC,SAAU,OACVC,gBAAYC,GAEd1L,EAAG,CACCmL,MAAM,EACNhP,OAAQ,SACRwP,eAAWD,GAEfxL,EAAG,CACDiL,MAAM,EACNV,MAAO,SAETmB,OAAQ,CACNT,MAAM,GAERU,MAAO,CACJC,QAAS,QAEZC,MAAO,CACHd,SAAS,EACTe,SAAU,WACVC,QAAS,EACTC,QAAS,IAGfC,MAAO,CACL5K,KAAM,WACN6K,OAAQ,CACNjB,MAAM,EACNI,MAAO,CACHc,OAAQ,OACRb,SAAU,MACVc,SAAU,4BAIlBC,MAAO,CACLH,OAAQ,CACNjB,MAAM,EACNqB,SAAU,EACVC,SAAU,IACVlB,MAAO,CACLmB,MAAO,OACPlB,SAAU,MACVc,SAAU,0BAEZL,QAAS,EACTC,QAAS,EACTS,OAAQ,KCtCVC,ID+CO,IAAI3M,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,UAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YC3RC,SAAC4M,GACpB,OACI1L,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,eACXF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,SACbF,EAAAzH,EAAA0H,cAAA,2BAZa,MAYoByL,EAAW3N,gBAXzCiC,EAAAzH,EAAA0H,cAAA,QAAMC,UAAU,gBAAhB,UAEAF,EAAAzH,EAAA0H,cAAA,QAAMC,UAAU,eAAhB,UASH,SAAsEwL,EAAW5N,YAEnFkC,EAAAzH,EAAA0H,cAAC0L,GAAApT,EAAD,CAAO8O,QAASsC,GAAc3L,OAAQ0N,EAAW1N,OAAQoC,KAAK,cAAc6J,MAAM,OAAO2B,OAAO,YAKtGC,oLAEE,OACI7L,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,2BACXF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,eAAf,eAGAF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,aACXS,KAAKC,MAAMkL,iBAAmBL,GAAe9K,KAAKC,MAAM8K,YAAc1L,EAAAzH,EAAA0H,cAAC2H,GAAD,eARjE7G,aAwBVC,mBARf,SAAyB7I,GAErB,MAAO,CACH2T,iBAAkBzO,GAAyBlF,GAC3CuT,WAAYpO,GAAmBnF,KAIxB6I,CAAyB6K,uxMCrBxC,IAAME,GAAU,SAACnL,GAAU,IAEnBU,EAaAV,EAbAU,SACAkD,EAYA5D,EAZA4D,SACAjD,EAWAX,EAXAW,KACArJ,EAUA0I,EAVA1I,QACA0O,EASAhG,EATAgG,aACAC,EAQAjG,EARAiG,aACAC,EAOAlG,EAPAkG,qBACAC,EAMAnG,EANAmG,qBACAiF,EAKApL,EALAoL,mBACA1I,EAIA1C,EAJA0C,MACA2I,EAGArL,EAHAqL,mBACAC,EAEAtL,EAFAsL,oBACAC,EACAvL,EADAuL,oBAKJ,OACInM,EAAAzH,EAAA0H,cAACiJ,GAAA,EAAD,CAAMC,iBAAiB,UAAUjJ,UAAU,sBAEvCF,EAAAzH,EAAA0H,cAACmJ,GAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,UAAUpJ,UAAU,WAC9CF,EAAAzH,EAAA0H,cAAA,SAAOC,UAAU,mCACbF,EAAAzH,EAAA0H,cAAA,aACID,EAAAzH,EAAA0H,cAAA,UACID,EAAAzH,EAAA0H,cAAA,mBACAD,EAAAzH,EAAA0H,cAAA,oBACAD,EAAAzH,EAAA0H,cAAA,wBAGRD,EAAAzH,EAAA0H,cAAA,aACID,EAAAzH,EAAA0H,cAAA,UACID,EAAAzH,EAAA0H,cAAA,iBACAD,EAAAzH,EAAA0H,cAAA,UAAK2G,GACL5G,EAAAzH,EAAA0H,cAAA,UAAK6G,MAKjB9G,EAAAzH,EAAA0H,cAAA,QAAMC,UAAU,MAAMkM,SAAU,SAAC5G,GAC7BA,EAAM6G,iBP0HE,SAAC/K,EAAUkD,EAAUjD,EAAM9B,EAAQvH,GAC3DsM,EAAS0C,QAAQoF,eAAejE,KAAK,CAAEC,KAAMpQ,EAAUqU,MAAOhL,EAAKmB,MAAM8J,MAAM/M,EAAQ,WACtF8I,GAAG,kBAAmB,SAACC,GACtBlH,ED7EI,CACFlB,KAAM,uBC8ETmI,GAAG,QAAQ,SAACrC,GACXlC,QAAQkC,MAAMA,GACdzE,OAAO6F,MAAP,yBOhIcgF,CAAahL,EAAUkD,EAAUjD,EAAMyK,EAAoB9T,GAC3D8L,QAAQC,IAAI,wBAEbjE,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,yBACXF,EAAAzH,EAAA0H,cAAA,SACAG,KAAK,OACLqM,YAAY,aACZC,SAAU,SAACzT,GAAD,OAAOqI,ER8C7B,CACHlB,KAAM,+BACNX,OQhDoExG,EAAE4H,OAAO0L,SAC9DrM,UAAU,kDACVyM,UAAQ,KAEZ3M,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,8BACXF,EAAAzH,EAAA0H,cAAA,UAAQG,KAAK,SAASF,UAAU,oCAAhC,aAIPF,EAAAzH,EAAA0H,cAAA,SAAOC,UAAU,mCACbF,EAAAzH,EAAA0H,cAAA,aACID,EAAAzH,EAAA0H,cAAA,UACID,EAAAzH,EAAA0H,cAAA,kBACAD,EAAAzH,EAAA0H,cAAA,UAAK4G,GACL7G,EAAAzH,EAAA0H,cAAA,UAAK8G,MAKjB/G,EAAAzH,EAAA0H,cAAA,QAAMC,UAAU,MAAMkM,SAAU,SAAC5G,GAC7BA,EAAM6G,iBPsHE,SAAC/K,EAAUkD,EAAUjD,EAAM+B,EAAO7D,EAAQvH,GAClEuH,EAAS8B,EAAKmB,MAAM8J,MAAM/M,EAAQ,SAElC6D,EAAM4D,QAAQ0F,QAAQpI,EAAS6C,QAAQxD,QAASpE,GAAQ4I,KAAK,CAAEC,KAAMpQ,IACpEqQ,GAAG,kBAAmB,SAACC,GACpBhE,EAAS0C,QAAQ2F,aAAavJ,EAAM+D,QAAQxD,QAASpE,GAAQ4I,KAAK,CAAEC,KAAMpQ,IACzEqQ,GAAG,kBAAmB,SAACC,GACpBlH,EDzGF,CACFlB,KAAM,uBC0GLmI,GAAG,QAAS,SAACrC,GACVlC,QAAQkC,MAAMA,GACdzE,OAAO6F,MAAM,2BOhILuF,CAAavL,EAAUkD,EAAUjD,EAAM+B,EAAO2I,EAAoB/T,GAClE8L,QAAQC,IAAI,wBAEbjE,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,yBACXF,EAAAzH,EAAA0H,cAAA,SACAG,KAAK,OACLqM,YAAY,cACZC,SAAU,SAACzT,GAAD,OAAOqI,ERgC7B,CACHlB,KAAM,+BACNX,OQlCoExG,EAAE4H,OAAO0L,SAC9DrM,UAAU,kDACVyM,UAAQ,KAEZ3M,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,8BACXF,EAAAzH,EAAA0H,cAAA,UAAQG,KAAK,SAASF,UAAU,oCAAhC,cAMXF,EAAAzH,EAAA0H,cAACmJ,GAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,WAAWpJ,UAAU,WAEhDF,EAAAzH,EAAA0H,cAAA,SAAOC,UAAU,mCACbF,EAAAzH,EAAA0H,cAAA,aACID,EAAAzH,EAAA0H,cAAA,UACID,EAAAzH,EAAA0H,cAAA,mBACAD,EAAAzH,EAAA0H,cAAA,oBACAD,EAAAzH,EAAA0H,cAAA,wBAGRD,EAAAzH,EAAA0H,cAAA,aACID,EAAAzH,EAAA0H,cAAA,UACID,EAAAzH,EAAA0H,cAAA,iBACAD,EAAAzH,EAAA0H,cAAA,UAAK2G,GACL5G,EAAAzH,EAAA0H,cAAA,UAAK6G,MAKjB9G,EAAAzH,EAAA0H,cAAA,QAAMC,UAAU,MAAMkM,SAAU,SAAC5G,GAC7BA,EAAM6G,iBPmEG,SAAC/K,EAAUkD,EAAUjD,EAAM9B,EAAQvH,GAC5DsM,EAAS0C,QAAQ4F,cAAcvL,EAAKmB,MAAM8J,MAAM/M,EAAQ,UAAU4I,KAAK,CAAEC,KAAMpQ,IAC9EqQ,GAAG,kBAAmB,SAACC,GACtBlH,EDzFI,CACFlB,KAAM,uBC0FTmI,GAAG,QAAQ,SAACrC,GACXlC,QAAQkC,MAAMA,GACdzE,OAAO6F,MAAP,yBOzEcwF,CAAcxL,EAAUkD,EAAUjD,EAAM2K,EAAqBhU,KAE9D8H,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,yBACXF,EAAAzH,EAAA0H,cAAA,SACAG,KAAK,OACLqM,YAAY,aACZC,SAAU,SAACzT,GAAD,OAAOqI,ERb7B,CACHlB,KAAM,gCACNX,OQWqExG,EAAE4H,OAAO0L,SAC/DrM,UAAU,kDACVyM,UAAQ,KAEX3M,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,8BACXF,EAAAzH,EAAA0H,cAAA,UAAQG,KAAK,SAASF,UAAU,oCAAhC,cAGRF,EAAAzH,EAAA0H,cAAA,SAAOC,UAAU,mCACbF,EAAAzH,EAAA0H,cAAA,aACID,EAAAzH,EAAA0H,cAAA,UACID,EAAAzH,EAAA0H,cAAA,kBACAD,EAAAzH,EAAA0H,cAAA,UAAK4G,GACL7G,EAAAzH,EAAA0H,cAAA,UAAK8G,MAMjB/G,EAAAzH,EAAA0H,cAAA,QAAMC,UAAU,MAAMkM,SAAU,SAAC5G,GAC7BA,EAAM6G,iBPqEG,SAAC/K,EAAUkD,EAAUjD,EAAM+B,EAAO7D,EAAQvH,GACnEsM,EAAS0C,QAAQ6F,cAAczJ,EAAM+D,QAAQxD,QAAStC,EAAKmB,MAAM8J,MAAM/M,EAAQ,UAAU4I,KAAK,CAAEC,KAAMpQ,IACrGqQ,GAAG,kBAAmB,SAACC,GACpBlH,EDtHE,CACFlB,KAAM,uBCuHTmI,GAAG,QAAS,SAACrC,GACVlC,QAAQkC,MAAMA,GACdzE,OAAO6F,MAAM,yBO3EDyF,CAAczL,EAAUkD,EAAUjD,EAAM+B,EAAO6I,EAAqBjU,KAErE8H,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,yBACXF,EAAAzH,EAAA0H,cAAA,SACAG,KAAK,OACLqM,YAAY,cACZC,SAAU,SAACzT,GAAD,OAAOqI,ERzB7B,CACHlB,KAAM,gCACNX,OQuBqExG,EAAE4H,OAAO0L,SAC/DrM,UAAU,kDACVyM,UAAQ,KAEZ3M,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,8BACXF,EAAAzH,EAAA0H,cAAA,UAAQG,KAAK,SAASF,UAAU,oCAAhC,iBAUjB8M,gMAEIrM,KAAKsM,qMAI8CtM,KAAKC,MAAlDU,aAAUC,SAAMiD,aAAUlB,UAAOpL,qBACnCuO,GAAanF,EAAUC,EAAMiD,EAAUlB,EAAOpL,sIAIpD,OACI8H,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,2BACXF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,eAAf,WAGAF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,aACVS,KAAKC,MAAMmL,SAAWA,GAASpL,KAAKC,OAASZ,EAAAzH,EAAA0H,cAAC2H,GAAD,eAjB5C7G,aA0DPC,mBAlCf,SAAyB7I,GACrB,IAAM+U,EAAkB/N,GAAwBhH,GAchD,MAAO,CACHD,QAASG,EAAgBF,GACzBqM,SAAUzL,EAAiBZ,GAC3BmL,MAAO3K,EAAcR,GACrBoJ,KAAM/I,EAAaL,GACnByO,aAAcxH,GAAqBjH,GACnC0O,aAAcxH,GAAqBlH,GACnC2O,qBAAsBxH,GAA6BnH,GACnD4O,qBAAsBxH,GAA6BpH,GAEnD+U,kBACAnB,UAAWmB,EACXlB,mBAAoBxM,GAA2BrH,GAC/C+T,oBAAqBxM,GAA4BvH,GACjD8T,mBAAoBtM,GAA2BxH,GAC/CgU,oBAAqBvM,GAA4BzH,KAI1C6I,CAAyBgM,IChOlCjB,GAAW,SAACnL,GAAU,IAEpBU,EASAV,EATAU,SACA6L,EAQAvM,EARAuM,SACA3I,EAOA5D,EAPA4D,SACAlB,EAMA1C,EANA0C,MACA/B,EAKAX,EALAW,KACArJ,EAIA0I,EAJA1I,QACAkV,EAGAxM,EAHAwM,UACAC,EAEAzM,EAFAyM,aACAC,EACA1M,EADA0M,cAIJ,OACEtN,EAAAzH,EAAA0H,cAACiJ,GAAA,EAAD,CAAMC,iBAAiB,MAAMjJ,UAAU,sBAErCF,EAAAzH,EAAA0H,cAACmJ,GAAA,EAAD,CAAKC,SAAS,MAAMC,MAAM,MAAMpJ,UAAU,WAE1CF,EAAAzH,EAAA0H,cAAA,QAAMmM,SAAU,SAAC5G,GACbA,EAAM6G,iBR6MU,SAAC/K,EAAUkD,EAAUlB,EAAO/B,EAAMrH,EAAOhC,GACjE,IAAMqV,EAAWjK,EAAM+D,QAAQxD,QACzBpJ,EAAY8G,EAAKmB,MAAM8J,MAAMtS,EAAMuF,OAAQ,SAE3CjF,EAAa+G,EAAKmB,MAAM8J,OAAOtS,EAAMuF,OAASvF,EAAMsT,OAAOC,WAAY,SAE7EjJ,EAAS0C,QAAQwG,UAAUH,EAAU9S,EAHnBnD,6CAGyCkD,GAAY6N,KAAK,CAAEC,KAAMpQ,IACnFqQ,GAAG,kBAAmB,SAACC,GACpBlH,EDlFG,CACHlB,KAAM,uBCmFTmI,GAAG,QAAQ,SAACrC,GACTlC,QAAQkC,MAAMA,GACdzE,OAAO6F,MAAM,yBQxNTqG,CAAarM,EAAUkD,EAAUlB,EAAO/B,EAAM4L,EAAUjV,KAE5D8H,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,oBACXF,EAAAzH,EAAA0H,cAAA,kCACAD,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,eACXF,EAAAzH,EAAA0H,cAAA,SACIG,KAAK,OACLF,UAAU,kDACVuM,YAAY,aACZC,SAAU,SAACzT,GAAD,OAAOqI,ET2G1B,CACHlB,KAAM,2BACNX,OS7G8DxG,EAAE4H,OAAO0L,SAC3DI,UAAQ,MAIpB3M,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,oBACXF,EAAAzH,EAAA0H,cAAA,0BACAD,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,eACXF,EAAAzH,EAAA0H,cAAA,SACIG,KAAK,OACLF,UAAU,oDACVuM,YAAY,YACZC,SAAU,SAACzT,GAAD,OAAOqI,ETsG1B,CACHlB,KAAM,0BACNoN,MSxG6DvU,EAAE4H,OAAO0L,SAC1DI,UAAQ,MAIhB3M,EAAAzH,EAAA0H,cAAA,UAAQG,KAAK,SAASF,UAAU,oCAAhC,aACEmN,EAAerN,EAAAzH,EAAA0H,cAAA,uBAAekN,EAAS1N,OAAS0N,EAASK,MAA1C,QAA+D,OAIpFxN,EAAAzH,EAAA0H,cAACmJ,GAAA,EAAD,CAAKC,SAAS,OAAOC,MAAM,OAAOpJ,UAAU,WAE5CF,EAAAzH,EAAA0H,cAAA,QAAMmM,SAAU,SAAC5G,GACbA,EAAM6G,iBR4LW,SAAC/K,EAAUkD,EAAUlB,EAAO/B,EAAMrH,EAAOhC,GAClE,IACMuC,EAAY8G,EAAKmB,MAAM8J,OAAOtS,EAAMuF,OAASvF,EAAMsT,OAAOC,WAAY,SACtElT,EAAY+I,EAAM+D,QAAQxD,QAC1BrJ,EAAa+G,EAAKmB,MAAM8J,MAAMtS,EAAMuF,OAAQ,SAElD+E,EAAS0C,QAAQwG,UALApW,6CAKoBmD,EAAWF,EAAWC,GAAY6N,KAAK,CAAEC,KAAMpQ,IACnFqQ,GAAG,kBAAmB,SAACC,GACpBlH,EDrEG,CACHlB,KAAM,wBCsETmI,GAAG,QAAQ,SAACrC,GACTlC,QAAQkC,MAAMA,GACdzE,OAAO6F,MAAM,yBQvMTsG,CAActM,EAAUkD,EAAUlB,EAAO/B,EAAM6L,EAAWlV,KAE9D8H,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,oBACXF,EAAAzH,EAAA0H,cAAA,mCACAD,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,eACXF,EAAAzH,EAAA0H,cAAA,SACIG,KAAK,OACLF,UAAU,kDACVuM,YAAY,cACZC,SAAU,SAACzT,GAAD,OAAOqI,ETuG1B,CACHlB,KAAM,4BACNX,OSzG+DxG,EAAE4H,OAAO0L,SAC5DI,UAAQ,MAIpB3M,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,oBACXF,EAAAzH,EAAA0H,cAAA,2BACAD,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,eACXF,EAAAzH,EAAA0H,cAAA,SACIG,KAAK,OACLF,UAAU,oDACVuM,YAAY,aACZC,SAAU,SAACzT,GAAD,OAAOqI,ETkG1B,CACHlB,KAAM,2BACNoN,MSpG8DvU,EAAE4H,OAAO0L,SAC3DI,UAAQ,MAIhB3M,EAAAzH,EAAA0H,cAAA,UAAQG,KAAK,SAASF,UAAU,oCAAhC,cACEoN,EAAgBtN,EAAAzH,EAAA0H,cAAA,uBAAemN,EAAU3N,OAAS2N,EAAUI,MAA5C,QAAiE,SAQzFK,oLAGF,OACE7N,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,2BACbF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,eAAf,aAGAF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,aACZS,KAAKC,MAAMmL,SAAWA,GAASpL,KAAKC,OAASZ,EAAAzH,EAAA0H,cAAC2H,GAAD,eATjC7G,aAiCRC,mBAjBf,SAAyB7I,GACrB,IAAMgV,EAAWtN,GAAiB1H,GAC5BiV,EAAYtN,GAAkB3H,GAEpC,MAAO,CACHD,QAASG,EAAgBF,GACzBqM,SAAUzL,EAAiBZ,GAC3BmL,MAAO3K,EAAcR,GACrBoJ,KAAM/I,EAAaL,GACnBgV,WACAC,YACArB,UAAWoB,EAASW,SAAWV,EAAUU,OACzCT,aAAcF,EAAS1N,QAAU0N,EAASK,MAC1CF,cAAeF,EAAU3N,QAAU2N,EAAUI,QAItCxM,CAAyB6M,2xMCzIlCE,gMAEFpN,KAAKsM,mBAAmBtM,KAAKC,2FAGNA,mFACfU,EAAuBV,EAAvBU,SAAUkD,EAAa5D,EAAb4D,kBACZM,GAAcN,EAAUlD,0BACxBsE,GAAkBpB,EAAUlD,kIAIlC,OACItB,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,WACXF,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,kBACbF,EAAAzH,EAAA0H,cAAC+N,GAAD,MAGAhO,EAAAzH,EAAA0H,cAACgO,GAAD,OAKFjO,EAAAzH,EAAA0H,cAACiO,GAAD,MACAlO,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,kBACbF,EAAAzH,EAAA0H,cAACkO,GAAD,MACAnO,EAAAzH,EAAA0H,cAACmO,GAAD,OAEFpO,EAAAzH,EAAA0H,cAACoO,GAAD,cA5BUtN,aAyCPC,mBANf,SAAyB7I,GACrB,MAAO,CACLqM,SAAUzL,EAAiBZ,KAIlB6I,CAAyB+M,2xMCxClCO,gMAEH3N,KAAKsM,mBAAmBtM,KAAKC,MAAMU,8FAGZA,mFAClBC,EAAOF,GAASC,YAEEC,EAAKiC,IAAI+K,IAAIC,sBAA/BnL,kBACAzB,GAAYL,EAAMD,0BACJ4B,GAAU3B,EAAM8B,EAAW/B,4CAE7CG,OAAO6F,MAAM,sJAKQjD,GAAa9C,EAAM8B,EAAW/B,6CAEnDG,OAAO6F,MAAM,gQAOT,OACAtH,EAAAzH,EAAA0H,cAAA,WACCD,EAAAzH,EAAA0H,cAACwO,GAAD,MACE9N,KAAKC,MAAM8N,gBAAkB1O,EAAAzH,EAAA0H,cAAC0O,GAAD,MAAc3O,EAAAzH,EAAA0H,cAAA,OAAKC,UAAU,oBA7BnDa,aA0CFC,mBANf,SAAyB7I,GACxB,MAAO,CACLuW,gBAAiBxV,EAAwBf,KAI7B6I,CAAyBsN,iCCqGzC,IAMeM,GANKC,aAAgB,CAChCtN,KAxJJ,WAAmC,IAArBpJ,EAAqB8K,UAAAtF,OAAA,QAAA4M,IAAAtH,UAAA,GAAAA,UAAA,GAAZ,GAAI6L,EAAQ7L,UAAAtF,OAAA,EAAAsF,UAAA,QAAAsH,EACjC,OAAQuE,EAAO1O,MACb,IAAK,cACH,OAAOzF,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBwJ,WAAYmN,EAAOnN,aACxC,IAAK,sBACH,OAAOhH,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBD,QAAS4W,EAAO5W,UACrC,IAAK,uBACH,OAAOyC,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBH,QAAS8W,EAAO9W,UACrC,QACE,OAAOG,IAgJTmL,MA3IJ,WAAmC,IAApBnL,EAAoB8K,UAAAtF,OAAA,QAAA4M,IAAAtH,UAAA,GAAAA,UAAA,GAAZ,GAAI6L,EAAQ7L,UAAAtF,OAAA,EAAAsF,UAAA,QAAAsH,EACjC,OAAQuE,EAAO1O,MACb,IAAK,eACH,OAAOzF,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBkB,QAAQ,EAAMyK,SAAUgL,EAAOhL,WACpD,IAAK,uBACH,OAAOnJ,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBH,QAAS8W,EAAO9W,UACrC,QACE,OAAOG,IAqITqM,SAjIJ,WAAsC,IACzBvG,EADK9F,EAAoB8K,UAAAtF,OAAA,QAAA4M,IAAAtH,UAAA,GAAAA,UAAA,GAAZ,GAAI6L,EAAQ7L,UAAAtF,OAAA,EAAAsF,UAAA,QAAAsH,EAGpC,OAAQuE,EAAO1O,MACb,IAAK,kBACH,OAAOzF,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBkB,QAAQ,EAAMyK,SAAUgL,EAAOhL,WACpD,IAAK,0BACH,OAAOnJ,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBiB,gBAAiB,CAAEC,QAAQ,EAAM4E,KAAM6Q,EAAO1V,mBACnE,IAAK,uBACH,OAAOuB,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBsB,aAAc,CAAEJ,QAAQ,EAAM4E,KAAM6Q,EAAOrV,gBAChE,IAAK,oBACH,OAAOkB,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBmD,UAAW,CAAEjC,QAAQ,EAAM4E,KAAM6Q,EAAOxT,aAC7D,IAAK,mBACH,OAAOX,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBuR,iBAAiB,IACtC,IAAK,kBACH,OAAA/O,OAAAC,EAAA,EAAAD,CAAA,GACKxC,EADL,CAEEuR,iBAAiB,EACjBtQ,gBAAgBuB,OAAAC,EAAA,EAAAD,CAAA,GACXxC,EAAMiB,gBADI,CAEb6E,KAAI,GAAAyC,OAAA/F,OAAAoU,GAAA,EAAApU,CACCxC,EAAMiB,gBAAgB6E,MADvB,CAEF6Q,EAAO5U,YAIf,IAAK,eAUH,OALE+D,GADY,IAFN9F,EAAMsB,aAAawE,KAAK+Q,UAAU,SAAA9U,GAAK,OAAIA,EAAMgB,KAAO4T,EAAO5U,MAAMgB,KAGvE,GAAAwF,OAAA/F,OAAAoU,GAAA,EAAApU,CAAOxC,EAAMsB,aAAawE,MAA1B,CAAgC6Q,EAAO5U,QAEpC/B,EAAMsB,aAAawE,KAGrBtD,OAAAC,EAAA,EAAAD,CAAA,GACFxC,EADL,CAEEyQ,cAAc,EACdnP,aAAakB,OAAAC,EAAA,EAAAD,CAAA,GACRxC,EAAMsB,aADC,CAEVwE,WAIN,IAAK,gBACH,OAAOtD,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmByQ,cAAc,IAGnC,IAAK,gCACH,OAAOjO,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmByO,aAAckI,EAAO9W,UAE1C,IAAK,gCACH,OAAO2C,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmB0O,aAAciI,EAAO9W,UAE1C,IAAK,mBACH,OAAO2C,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmB+U,iBAAiB,IAEtC,IAAK,kBACH,OAAOvS,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmB+U,iBAAiB,IAEtC,IAAK,+BACH,OAAOvS,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmB6T,mBAAoB8C,EAAOrP,SAEhD,IAAK,gCACH,OAAO9E,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmB+T,oBAAqB4C,EAAOrP,SAEjD,IAAK,+BACH,OAAO9E,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmB8T,mBAAoB6C,EAAOrP,SAEhD,IAAK,gCACH,OAAO9E,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBgU,oBAAqB2C,EAAOrP,SAEjD,IAAK,2BACH,OAAO9E,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBgV,SAASxS,OAAAC,EAAA,EAAAD,CAAA,GAAMxC,EAAMgV,SAAb,CAAuB1N,OAAQqP,EAAOrP,WAEnE,IAAK,0BACH,OAAO9E,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBgV,SAASxS,OAAAC,EAAA,EAAAD,CAAA,GAAMxC,EAAMgV,SAAb,CAAuBK,MAAOsB,EAAOtB,UAElE,IAAK,mBACH,OAAO7S,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBgV,SAASxS,OAAAC,EAAA,EAAAD,CAAA,GAAMxC,EAAMgV,SAAb,CAAuB1N,OAAQ,KAAM+N,MAAO,KAAMM,QAAQ,MAEvF,IAAK,aAUH,OALE7P,GADY,IAFN9F,EAAMmD,UAAU2C,KAAK+Q,UAAU,SAAA9U,GAAK,OAAIA,EAAMgB,KAAO4T,EAAO5U,MAAMgB,KAGpE,GAAAwF,OAAA/F,OAAAoU,GAAA,EAAApU,CAAOxC,EAAMmD,UAAU2C,MAAvB,CAA6B6Q,EAAO5U,QAE/B/B,EAAMmD,UAAU2C,KAGpBtD,OAAAC,EAAA,EAAAD,CAAA,GACFxC,EADL,CAEEmD,UAAUX,OAAAC,EAAA,EAAAD,CAAA,GACLxC,EAAMmD,UADF,CAEP2C,SAEHkP,SAASxS,OAAAC,EAAA,EAAAD,CAAA,GACHxC,EAAMgV,SADJ,CAENW,QAAQ,IAETV,UAAUzS,OAAAC,EAAA,EAAAD,CAAA,GACLxC,EAAMiV,UADF,CAEPU,QAAQ,MAKd,IAAK,4BACH,OAAOnT,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBiV,UAAUzS,OAAAC,EAAA,EAAAD,CAAA,GAAMxC,EAAMiV,UAAb,CAAwB3N,OAAQqP,EAAOrP,WAErE,IAAK,2BACH,OAAO9E,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBiV,UAAUzS,OAAAC,EAAA,EAAAD,CAAA,GAAMxC,EAAMiV,UAAb,CAAwBI,MAAOsB,EAAOtB,UAEpE,IAAK,oBACH,OAAO7S,OAAAC,EAAA,EAAAD,CAAA,GAAKxC,EAAZ,CAAmBiV,UAAUzS,OAAAC,EAAA,EAAAD,CAAA,GAAMxC,EAAMiV,UAAb,CAAwB3N,OAAQ,KAAM+N,MAAO,KAAMM,QAAQ,MAIzF,QACE,OAAO3V,MClJP8W,GAAmBC,0BACnBC,GAAa,GAGbC,GAAmB3N,OAAO4N,sCAAwCC,KCGxE,IDDuCC,GCCnBC,QACW,cAA7B/N,OAAOgO,SAASC,UAEe,UAA7BjO,OAAOgO,SAASC,UAEhBjO,OAAOgO,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP7P,EAAAzH,EAAA0H,cAAC6P,EAAA,EAAD,CAAUC,MFDDC,aACHpB,GACAW,GACAH,GAAiBa,KAAejN,WAAf,EAAmBmM,GAAnBzO,OAAA,CAA+BuO,SEDpDjP,EAAAzH,EAAA0H,cAACiQ,GAAD,OAEFC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.db59d01c.chunk.js","sourcesContent":["export const ETHER_ADDRESS = '0x0000000000000000000000000000000000000000'\r\nexport const GREEN = 'success'\r\nexport const RED = 'danger'\r\n\r\nexport const DECIMALS = (10**18)\r\n\r\n\r\n// Shortcut to avoid passing around web3 connection\r\nexport const ether = (wei) => {\r\n    if(wei) {\r\n        return(wei / DECIMALS) // 18 decimal places\r\n    }\r\n}\r\n\r\n// Tokens and ether have same decimal resolution\r\nexport const tokens = ether\r\n// export const tokens = (n) => ether(n)\r\n\r\n//Ether helper\r\n//  export const formatBalance = (balance) => {\r\n//      const precision = 100 // refactor or 100 to precision -- using 2 decimal places\r\n    \r\n//      balance = ether(balance)\r\n//      balance = Math.round(balance * precision) / precision // Use 2 decimal places\r\n    \r\n//      return balance\r\n//  }","// Fetches values from Redux Store\r\n\r\nimport { get, groupBy, reject, maxBy, minBy } from 'lodash'\r\nimport { createSelector } from 'reselect'\r\nimport moment from 'moment'\r\nimport { ETHER_ADDRESS, GREEN, RED, ether, tokens  } from '../helpers'  // need to import formatBalance here if moved to helpers\r\n\r\n//TODO: Move to helpers file\r\nexport const formatBalance = (balance) => {\r\n     const precision = 100 // refactor or 100 to precision -- using 2 decimal places\r\n    \r\n     balance = ether(balance)\r\n     balance = Math.round(balance * precision) / precision // Use 2 decimal places\r\n    \r\n     return balance\r\n}\r\n\r\n\r\nconst account = state => get(state, 'web3.account')\r\nexport const accountSelector = createSelector(account, a => a)\r\n\r\nconst web3 = state => get(state, 'web3.connection')\r\nexport const web3Selector = createSelector(web3, w => w)\r\n\r\nconst tokenLoaded = state => get(state, 'token.loaded', false)\r\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\r\n\r\nconst token = state => get(state, 'token.contract')\r\nexport const tokenSelector = createSelector(token, t => t)\r\n\r\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\r\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\r\n\r\nconst exchange = state => get(state, 'exchange.contract')\r\nexport const exchangeSelector = createSelector(exchange, e => e)\r\n\r\nexport const contractsLoadedSelector = createSelector(\r\n    tokenLoaded,\r\n    exchangeLoaded,\r\n    (tl, el) => (tl && el)\r\n)\r\n\r\n//All Orders\r\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false)\r\nconst allOrders = state => get(state, 'exchange.allOrders.data', [])\r\n\r\n// Cancelled Orders\r\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false)\r\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded)\r\n\r\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', [])\r\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o)\r\n\r\n// Filled Orders\r\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\r\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\r\n\r\n\r\nconst filledOrders = state => get(state, 'exchange.filledOrders.data', [])\r\nexport const filledOrdersSelector = createSelector(\r\n    filledOrders,\r\n    (orders) => {\r\n        // console.log(orders)\r\n        // Sort orders by date ascending for price comparison\r\n        orders = orders.sort((a,b) => a.timestamp - b.timestamp)\r\n       // console.log('ORDERS Timestamped', orders)\r\n        // Decorate the orders\r\n        orders = decorateFilledOrders(orders)\r\n       // console.log('ORDERS Decorated', orders)\r\n        // Sort orders by date descending for display\r\n        orders = orders.sort((a,b) => b.timestamp - a.timestamp)\r\n        return orders\r\n    }\r\n)\r\n\r\n\r\nconst decorateFilledOrders = (orders) => {\r\n    // Track previous to compare history\r\n    let previousOrder = orders[0]\r\n    return(\r\n      orders.map((order) => {\r\n          order = decorateOrder(order)\r\n          order = decorateFilledOrder(order, previousOrder)\r\n          previousOrder = order // Update the previous order once it's decorated\r\n          return order\r\n      })        \r\n    )\r\n}\r\n\r\nconst decorateOrder = (order) => {\r\n    let etherAmount\r\n    let tokenAmount\r\n    \r\n    // if tokenGive \r\n    if(order.tokenGive === ETHER_ADDRESS) {\r\n        etherAmount = order.amountGive\r\n        tokenAmount = order.amountGet       \r\n    } else {\r\n        etherAmount = order.amountGet\r\n        tokenAmount = order.amountGive \r\n    }\r\n\r\n\r\n    // Calculate token price to 5 decimal places\r\n    const precision = 100000\r\n    let tokenPrice = (etherAmount / tokenAmount)\r\n    tokenPrice = Math.round(tokenPrice * precision) / precision\r\n\r\n    // console.log(order)\r\n    return({\r\n      ...order,\r\n      etherAmount: ether(etherAmount),\r\n      tokenAmount: tokens(tokenAmount),\r\n      tokenPrice,\r\n      formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\r\n    })\r\n}\r\n\r\nconst decorateFilledOrder = (order, previousOrder) => {\r\n    return({\r\n        ...order,\r\n        tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\r\n    })\r\n}\r\n\r\nconst tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\r\n    // Show green price if only one order exists\r\n    if(previousOrder.id === orderId) {\r\n        return GREEN\r\n    }\r\n\r\n    // Show green price if order price higher than previous price\r\n    // Show red price if order price lower than previous order\r\n    if(previousOrder.tokenPrice <= tokenPrice) {\r\n        return GREEN // success\r\n    } else {\r\n        return RED // danger\r\n    }\r\n}\r\n\r\nconst openOrders = state => {\r\n    const all = allOrders(state)\r\n    const filled = filledOrders(state)\r\n    const cancelled = cancelledOrders(state)\r\n\r\n    const openOrders = reject(all, (order) => {   //lodash - reject\r\n        const orderFilled = filled.some((o) => o.id === order.id)      \r\n        const orderCancelled = cancelled.some((o) => o.id === order.id)\r\n        return(orderFilled || orderCancelled)\r\n        })\r\n    \r\n    return openOrders\r\n}\r\n\r\n\r\n\r\n// Order Book \r\n\r\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state)\r\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\r\n\r\n//Create the Order Book\r\nexport const orderBookSelector = createSelector(\r\n    openOrders,\r\n    (orders) => {\r\n        // Decorate orders\r\n        orders = decorateOrderBookOrders(orders)\r\n        \r\n        // Group orders by \"orderType\"\r\n        orders = groupBy(orders, 'orderType')\r\n        \r\n        // Fetch Buy orders\r\n        const buyOrders = get(orders, 'buy', [])\r\n\r\n        // Sort Buy orders by token price\r\n        orders = {\r\n            ...orders,\r\n            buyOrders: buyOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\r\n        }\r\n\r\n        // Fetch Sell orders\r\n        const sellOrders = get(orders, 'sell', [])\r\n\r\n        // Sort Sell orders by token price\r\n        orders = {\r\n            ...orders,\r\n            sellOrders: sellOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\r\n        }\r\n        return orders\r\n    }\r\n)\r\n\r\nconst decorateOrderBookOrders = (orders) => {\r\n    return(\r\n        orders.map((order) => {\r\n            order = decorateOrder(order)\r\n            order = decorateOrderBookOrder(order)\r\n            // Decorate Order book order\r\n            return(order)\r\n        })\r\n    )\r\n}\r\n\r\nconst decorateOrderBookOrder = (order) => {\r\n    const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\r\n    return({\r\n        ...order,\r\n        orderType,\r\n        orderTypeClass: (orderType === 'buy' ? GREEN : RED),\r\n        orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\r\n    })\r\n}\r\n\r\n\r\n// My Transactions \r\n\r\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\r\n\r\nexport const myFilledOrdersSelector = createSelector(\r\n    account,\r\n    filledOrders,\r\n    (account, orders) => {\r\n        // Find our orders\r\n        orders = orders.filter((o) => o.user === account || o.userFill === account)\r\n\r\n        // Sort by date descending\r\n        orders = orders.sort((a,b) => a.timestamp - b.timestamp)\r\n\r\n        //Decorate orders - add display attributes\r\n        orders = decorateMyFilledOrders(orders, account)\r\n        return orders\r\n    }\r\n)\r\n\r\n\r\nconst decorateMyFilledOrders = (orders, account) => {\r\n    return(\r\n        orders.map((order) => {\r\n            order = decorateOrder(order)\r\n            order = decorateMyFilledOrder(order, account)\r\n            return(order)\r\n        })\r\n    )\r\n}\r\n\r\n\r\nconst decorateMyFilledOrder = (order, account) => {\r\n    const myOrder = order.user === account\r\n\r\n    let orderType \r\n    if(myOrder) {\r\n        orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\r\n    } else {\r\n        orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\r\n    }\r\n\r\n    return({\r\n        ...order,\r\n        orderType,\r\n        orderTypeClass: (orderType === 'buy' ? GREEN : RED),\r\n        orderSign: (orderType === 'buy' ? '+' : '-')\r\n    })\r\n}\r\n\r\n\r\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\r\n\r\nexport const myOpenOrdersSelector = createSelector(\r\n    account,\r\n    openOrders,\r\n    (account, orders) => {\r\n       // console.log('ORDERS', orders)\r\n\r\n        // Filter orders create by current account\r\n        orders = orders.filter((o) => o.user === account)\r\n        // console.log('ORDERS', orders)\r\n        \r\n        // Decorate orders - add display attributes\r\n        orders = decorateMyOpenOrders(orders)\r\n\r\n        // console.log('ORDERS', orders)\r\n\r\n        //Sort orders by date descending\r\n        orders = orders.sort((a,b) => b.timestamp - a.timestamp)\r\n        // console.log('ORDERS', orders)\r\n        return orders\r\n    }\r\n)\r\n\r\n\r\nconst decorateMyOpenOrders = (orders, account) => {\r\n    return(\r\n        orders.map((order) => {\r\n            order = decorateOrder(order)\r\n            order = decorateMyOpenOrder(order, account)\r\n            return(order)\r\n        })\r\n    )\r\n}\r\n\r\n\r\nconst decorateMyOpenOrder = (order, account) => {\r\n    let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\r\n    \r\n    return({\r\n        ...order,\r\n        orderType,\r\n        orderTypeClass: (orderType === 'buy' ? GREEN : RED)\r\n    })\r\n}\r\n\r\n\r\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\r\n\r\nexport const priceChartSelector = createSelector(\r\n    filledOrders,\r\n    (orders) => {\r\n        // Sort orders by data ascending to compare history\r\n        orders = orders.sort((a,b) => a.timestamp - b.timestamp)\r\n\r\n        //Decorate orders - add display attributes\r\n        orders = orders.map((o) => decorateOrder(o))\r\n\r\n        //Get last 2 orders for final price & price change\r\n        let secondLastOrder, lastOrder\r\n        [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length)\r\n\r\n        //get last order price\r\n        const lastPrice = get(lastOrder, 'tokenPrice', 0)\r\n\r\n        //get second last order price\r\n        const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0)\r\n\r\n        return({\r\n            lastPrice,\r\n            lastPriceChange: (lastPrice >= secondLastPrice ? '+' : '-'),\r\n            series: [{\r\n                data: buildGraphData(orders)\r\n            }]\r\n        })\r\n    }\r\n)\r\n\r\nconst buildGraphData = (orders) => {\r\n    // Group the orders by hour for the graph\r\n    orders = groupBy(orders, (o) => moment.unix(o.timestamp).startOf('hour').format())\r\n\r\n    // Get each hour where data exists\r\n    const hours = Object.keys(orders)\r\n\r\n    //Build the graph series\r\n    const graphData = hours.map((hour) => {\r\n        // Fetch all the orders from current hour\r\n        \r\n        const group = orders[hour]\r\n        // Calculate price values - open, high, low, close\r\n\r\n        const open = group[0] //first order\r\n        const high = maxBy(group, 'tokenPrice') // use lodash maxBy for high price\r\n        const low = minBy(group, 'tokenPrice') // low price (lodash minBy)\r\n        const close = group[group.length -1] // last order\r\n        \r\n        return({\r\n            x: new Date(hour),\r\n            y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\r\n        })\r\n    })\r\n    \r\n    return graphData\r\n}\r\n\r\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false)\r\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status)\r\n\r\nconst orderFilling = state => get(state, 'exchange.orderFilling', false)\r\nexport const orderFillingSelector = createSelector(orderFilling, status => status)\r\n\r\n\r\n//BALANCES\r\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true)\r\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status)\r\n\r\nconst etherBalance = state => get(state, 'web3.balance', 0)\r\nexport const etherBalanceSelector = createSelector(\r\n    etherBalance,\r\n    (balance) => {\r\n        return formatBalance(balance)\r\n    }\r\n)\r\n\r\nconst tokenBalance = state => get(state, 'token.balance', 0)\r\nexport const tokenBalanceSelector = createSelector(\r\n    tokenBalance,\r\n    (balance) => {\r\n        return formatBalance(balance)\r\n    }\r\n)\r\n\r\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0)\r\nexport const exchangeEtherBalanceSelector = createSelector(\r\n    exchangeEtherBalance,\r\n    (balance) => {\r\n        return formatBalance(balance)\r\n    }\r\n)\r\n\r\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0)\r\nexport const exchangeTokenBalanceSelector = createSelector(\r\n    exchangeTokenBalance,\r\n    (balance) => {\r\n        return formatBalance(balance)\r\n    }\r\n)\r\n\r\n\r\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null)     // Fetch eth deposit from Redux Store\r\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount)\r\n\r\n\r\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null)\r\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount)\r\n\r\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null)\r\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount)\r\n\r\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null)\r\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount)\r\n\r\nconst buyOrder = state => get(state, 'exchange.buyOrder', {})\r\nexport const buyOrderSelector = createSelector(buyOrder, order => order)\r\n\r\n\r\nconst sellOrder = state => get(state, 'exchange.sellOrder', {})\r\nexport const sellOrderSelector = createSelector(sellOrder, order => order)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { accountSelector } from '../store/selectors'\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n        <a className=\"navbar-brand\" href=\"#/\">DarkUnicorn Token Exchange</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <ul className=\"navbar-nav ml-auto\">\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className=\"nav-link small\"\r\n              href={`https://etherscan.io/address/${this.props.account}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {this.props.account}\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    account: accountSelector(state)\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar)","// REDUX ACTIONS\r\n\r\n// WEB3\r\nexport function web3Loaded(connection) {\r\n    return {\r\n        type: 'WEB3_LOADED',\r\n        connection\r\n    }\r\n}\r\n\r\nexport function web3AccountLoaded(account) {\r\n    return {\r\n        type: 'WEB3_ACCOUNT_LOADED',\r\n        account\r\n    }\r\n}\r\n\r\n// handles TOKEN loading\r\nexport function tokenLoaded(contract) {\r\n    return {\r\n        type: 'TOKEN_LOADED',\r\n        contract\r\n    }\r\n}\r\n\r\n//EXCHANGE\r\nexport function exchangeLoaded(contract) {\r\n    return {\r\n        type: 'EXCHANGE_LOADED',\r\n        contract\r\n    }\r\n}\r\n\r\nexport function cancelledOrdersLoaded(cancelledOrders) {\r\n    return {\r\n        type: 'CANCELLED_ORDERS_LOADED',\r\n        cancelledOrders\r\n    }\r\n}\r\n\r\nexport function filledOrdersLoaded(filledOrders) {\r\n    return {\r\n        type: 'FILLED_ORDERS_LOADED',\r\n        filledOrders\r\n    }\r\n}\r\n\r\nexport function allOrdersLoaded(allOrders) {\r\n    return {\r\n        type: 'ALL_ORDERS_LOADED',\r\n        allOrders\r\n    }\r\n}\r\n\r\n// Cancel Order\r\nexport function orderCancelling() {\r\n    return {\r\n        type: 'ORDER_CANCELLING'\r\n    }\r\n}\r\n\r\n// Add cancelled orders to the Redux data array when the event is triggered\r\nexport function orderCancelled(order) {\r\n    return {\r\n        type: 'ORDER_CANCELLED',\r\n        order\r\n    }\r\n}\r\n\r\n\r\n// Fill Order\r\nexport function orderFilling() {\r\n    return {\r\n        type: 'ORDER_FILLING'\r\n    }\r\n}\r\n\r\n\r\nexport function orderFilled(order) {\r\n    return {\r\n        type: 'ORDER_FILLED',\r\n        order\r\n    }\r\n}\r\n\r\n// BALANCES\r\nexport function etherBalanceLoaded(balance) {\r\n    return{\r\n        type: 'ETHER_BALANCE_LOADED',\r\n        balance\r\n    }\r\n}\r\n\r\nexport function tokenBalanceLoaded(balance) {\r\n    return{\r\n        type: 'TOKEN_BALANCE_LOADED',\r\n        balance\r\n    }\r\n}\r\n    \r\nexport function exchangeEtherBalanceLoaded(balance) {\r\n    return{\r\n        type: 'EXCHANGE_ETHER_BALANCE_LOADED',\r\n        balance\r\n    }\r\n}\r\n\r\nexport function exchangeTokenBalanceLoaded(balance) {\r\n    return{\r\n        type: 'EXCHANGE_TOKEN_BALANCE_LOADED',\r\n        balance\r\n    }\r\n}\r\n\r\n    \r\nexport function balancesLoaded() {\r\n    return{\r\n        type: 'BALANCES_LOADED'\r\n    }\r\n}    \r\n    \r\n    \r\nexport function balancesLoading() {\r\n    return{\r\n        type: 'BALANCES_LOADING'\r\n    }\r\n}\r\n\r\nexport function etherDepositAmountChanged(amount) {\r\n    return {\r\n        type: 'ETHER_DEPOSIT_AMOUNT_CHANGED',\r\n        amount\r\n    }\r\n}\r\n\r\nexport function etherWithdrawAmountChanged(amount) {\r\n    return {\r\n        type: 'ETHER_WITHDRAW_AMOUNT_CHANGED',\r\n        amount\r\n    }\r\n}\r\n\r\nexport function tokenDepositAmountChanged(amount) {\r\n    return {\r\n        type: 'TOKEN_DEPOSIT_AMOUNT_CHANGED',\r\n        amount\r\n    }\r\n}\r\n\r\n\r\nexport function tokenWithdrawAmountChanged(amount) {\r\n    return {\r\n        type: 'TOKEN_WITHDRAW_AMOUNT_CHANGED',\r\n        amount\r\n    }\r\n}\r\n\r\n\r\n\r\n// Buy Orders\r\n\r\nexport function buyOrderAmountChanged(amount) {     // track amount\r\n    return {\r\n        type: 'BUY_ORDER_AMOUNT_CHANGED',\r\n        amount\r\n    }\r\n}\r\n\r\nexport function buyOrderPriceChanged(price) {       // track price\r\n    return {\r\n        type: 'BUY_ORDER_PRICE_CHANGED',\r\n        price\r\n    }\r\n}\r\n\r\nexport function buyOrderMaking(price) {             // Track form submission\r\n    return {\r\n        type: 'BUY_ORDER_MAKING'\r\n    }\r\n}\r\n\r\n\r\n//Generic Order\r\nexport function orderMade(order) {                  // track when the submission finished so subscribe to an event\r\n    return {\r\n        type: 'ORDER_MADE',\r\n        order\r\n    }\r\n}\r\n\r\n\r\n// Sell Order\r\nexport function sellOrderAmountChanged(amount) {     // track amount\r\n    return {\r\n        type: 'SELL_ORDER_AMOUNT_CHANGED',\r\n        amount\r\n    }\r\n}\r\n\r\nexport function sellOrderPriceChanged(price) {       // track price\r\n    return {\r\n        type: 'SELL_ORDER_PRICE_CHANGED',\r\n        price\r\n    }\r\n}\r\n\r\nexport function sellOrderMaking(price) {             // Track form submission\r\n    return {\r\n        type: 'SELL_ORDER_MAKING'\r\n    }\r\n}","\r\nimport Web3 from 'web3'\r\nimport {\r\n    web3Loaded,\r\n    web3AccountLoaded,\r\n    tokenLoaded,\r\n    exchangeLoaded,\r\n    cancelledOrdersLoaded,\r\n    filledOrdersLoaded,\r\n    allOrdersLoaded,\r\n    orderCancelling,\r\n    orderCancelled,\r\n    orderFilling,\r\n    orderFilled,\r\n    etherBalanceLoaded,\r\n    tokenBalanceLoaded,\r\n    exchangeEtherBalanceLoaded,\r\n    exchangeTokenBalanceLoaded,\r\n    balancesLoaded,\r\n    balancesLoading,\r\n    buyOrderMaking,\r\n    sellOrderMaking,\r\n    orderMade\r\n} from './actions'\r\nimport Token from '../abis/Token.json'\r\nimport Exchange from '../abis/Exchange.json'\r\nimport { ETHER_ADDRESS } from '../helpers'\r\n\r\nexport const loadWeb3 = (dispatch) => {\r\n// const web3 = new Web3(Web3.givenProvider || 'http://localhost:7545')\r\n   const web3 = new Web3(window.ethereum || 'http://localhost:7545')\r\n   dispatch(web3Loaded(web3))\r\n    return web3\r\n}\r\n\r\n\r\nexport const loadAccount = async (web3, dispatch) => {\r\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n    const account = web3.utils.toChecksumAddress(accounts[0])\r\n    \r\n    // const accounts = await web3.eth.getAccounts()\r\n    // const account = accounts[0]\r\n    dispatch(web3AccountLoaded(account))\r\n    return account\r\n}\r\n\r\n// export const loadAccount = async (web3, dispatch) => {\r\n//     const Web3 = require(\"web3\");\r\n//     const ethEnabled = async () => {\r\n//     if (window.ethereum) {\r\n//         await window.ethereum.send('eth_requestAccounts');\r\n//         window.web3 = new Web3(window.ethereum);\r\n//         return true;\r\n//     }\r\n//     return false;\r\n//     }\r\n//     const accounts = await web3.eth.getAccounts();\r\n//     console.log(\"account if it is connecting or not \", accounts)\r\n//     const account = await accounts[0]\r\n//     if(typeof account != 'undefined'){\r\n//         dispatch(web3AccountLoaded(account))\r\n//         return account\r\n//     } else {\r\n//         window.alert('Please login with MetaMask ')\r\n//         return ethEnabled;\r\n//         }\r\n// }\r\n\r\nexport const loadToken = async (web3, networkId, dispatch) => {\r\n    try {\r\n        const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address) \r\n        dispatch(tokenLoaded(token))\r\n        return token\r\n    } catch(error) {\r\n      console.log('Contract not deployed to the current network. Please select another network with Metamask.')\r\n      return null  \r\n    }        \r\n}\r\n\r\n\r\nexport const loadExchange = async (web3, networkId, dispatch) => {\r\n    try {\r\n        const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address) \r\n        dispatch(exchangeLoaded(exchange))\r\n        return exchange\r\n    } catch(error) {\r\n      console.log('Contract not deployed to the current network. Please select another network with Metamask.')\r\n      return null  \r\n    }        \r\n}\r\n\r\n\r\nexport const loadAllOrders = async(exchange, dispatch) => {      // Fetches all of the Smart Contract stream - All Events\r\n// Fetch cancelled orders with \"Cancel\" event stream \r\n    const cancelStream = await exchange.getPastEvents('Cancel', { fromBlock: 0, toBlock: 'latest' }) // setting to 'latest' will check entire blockchain \r\n\r\n// Format cancelled orders\r\n    const cancelledOrders = cancelStream.map((event) => event.returnValues)\r\n\r\n// Add cancelled orders to the redux store\r\n    dispatch(cancelledOrdersLoaded(cancelledOrders)) // adding to the Redux state\r\n\r\n// Fetch filled orders with the \"trade\" event stream\r\n    const tradeStream = await exchange.getPastEvents('Trade', { fromBlock: 0, toBlock: 'latest' })\r\n\r\n// Format filled orders\r\n    const filledOrders = tradeStream.map((event) => event.returnValues)\r\n\r\n// Add trade orders to the redux store\r\n    dispatch(filledOrdersLoaded(filledOrders)) // adding to the Redux state\r\n\r\n// Load order stream -- shows all Orders from Exchange.sol\r\n    const orderStream = await exchange.getPastEvents('Order', { fromBlock: 0, toBlock: 'latest' })\r\n\r\n// Format order stream\r\n    const allOrders = orderStream.map((event) => event.returnValues)\r\n\r\n// Add trade orders to the redux store\r\n    dispatch(allOrdersLoaded(allOrders)) // adding to the Redux state\r\n }\r\n\r\n\r\n // EVENTS\r\nexport const subscribeToEvents = async (exchange, dispatch) => {\r\n    exchange.events.Cancel({}, (error, event) => {\r\n        dispatch(orderCancelled(event.returnValues))  \r\n    })\r\n\r\n    exchange.events.Trade({}, (error, event) => {\r\n        dispatch(orderFilled(event.returnValues))  \r\n    })\r\n\r\n    exchange.events.Deposit({}, (error, event) => {\r\n        dispatch(balancesLoaded())  \r\n    })\r\n\r\n   exchange.events.Withdraw({}, (error, event) => {\r\n        dispatch(balancesLoaded())  \r\n    })   \r\n\r\n    exchange.events.Order({}, (error, event) => {\r\n        dispatch(orderMade(event.returnValues))\r\n    })\r\n}\r\n\r\n\r\nexport const cancelOrder = (dispatch, exchange, order, account) => {\r\n// Cancel Order and trigger MetaMask    \r\n    exchange.methods.cancelOrder(order.id).send({ from: account })    // access exchange in the Redux state\r\n    .on('transactionHash', (hash) => {                               // on the Client side interaction so use on \r\n        dispatch(orderCancelling())               // Cancelling order in progress, attempting to cancel the order      \r\n    })   \r\n    .on('error', (error) => {\r\n        console.log(error)\r\n        window.alert('There was an error!')\r\n    })          \r\n }\r\n\r\n\r\nexport const fillOrder = (dispatch, exchange, order, account) => {\r\n        exchange.methods.fillOrder(order.id).send({ from: account })    // access exchange in the Redux state\r\n        .on('transactionHash', (hash) => {                               // on the Client side interaction so use on \r\n            dispatch(orderFilling())                  \r\n        })   \r\n        .on('error', (error) => {\r\n            console.log(error)\r\n            window.alert('There was an error!')\r\n        })          \r\n     }\r\n\r\n\r\nexport const loadBalances = async (dispatch, web3, exchange, token, account) => {\r\n        if(typeof account !== 'undefined') {\r\n            // Ether balance in wallet\r\n            const etherBalance = await web3.eth.getBalance(account)\r\n            dispatch(etherBalanceLoaded(etherBalance))\r\n      \r\n            // Token balance in wallet\r\n            const tokenBalance = await token.methods.balanceOf(account).call()\r\n            dispatch(tokenBalanceLoaded(tokenBalance))\r\n      \r\n            // Ether balance in exchange\r\n            const exchangeEtherBalance = await exchange.methods.balanceOf(ETHER_ADDRESS, account).call()\r\n            dispatch(exchangeEtherBalanceLoaded(exchangeEtherBalance))\r\n      \r\n            // Token balance in exchange\r\n            const exchangeTokenBalance = await exchange.methods.balanceOf(token.options.address, account).call()\r\n            dispatch(exchangeTokenBalanceLoaded(exchangeTokenBalance))\r\n      \r\n            // Trigger all balances loaded\r\n            dispatch(balancesLoaded())\r\n          } else {\r\n            window.alert('Please login with MetaMask')\r\n          }\r\n}\r\n\r\n\r\nexport const depositEther = (dispatch, exchange, web3, amount, account) => {\r\n    exchange.methods.depositEther().send({ from: account,  value: web3.utils.toWei(amount, 'ether') })\r\n    .on('transactionHash', (hash) => {\r\n      dispatch(balancesLoading())\r\n    })\r\n    .on('error',(error) => {\r\n      console.error(error)\r\n      window.alert(`There was an error!`)\r\n    })\r\n  }\r\n\r\n\r\nexport const withdrawEther = (dispatch, exchange, web3, amount, account) => {\r\n    exchange.methods.withdrawEther(web3.utils.toWei(amount, 'ether')).send({ from: account })\r\n    .on('transactionHash', (hash) => {\r\n      dispatch(balancesLoading())\r\n    })\r\n    .on('error',(error) => {\r\n      console.error(error)\r\n      window.alert(`There was an error!`)\r\n    })\r\n  }\r\n\r\n\r\nexport const depositToken = (dispatch, exchange, web3, token, amount, account) => {\r\n    amount = web3.utils.toWei(amount, 'ether')\r\n    \r\n    token.methods.approve(exchange.options.address, amount).send({ from: account })     // access exchange in the Redux state\r\n    .on('transactionHash', (hash) => {                                                  // on the Client side interaction so use on \r\n        exchange.methods.depositToken(token.options.address, amount).send({ from: account })\r\n        .on('transactionHash', (hash) => {\r\n            dispatch(balancesLoading())\r\n            })  \r\n        .on('error', (error) => {\r\n            console.error(error)\r\n            window.alert('There was an error!')\r\n        })\r\n    })          \r\n}\r\n\r\n\r\nexport const withdrawToken = (dispatch, exchange, web3, token, amount, account) => {\r\n    exchange.methods.withdrawToken(token.options.address, web3.utils.toWei(amount, 'ether')).send({ from: account })\r\n    .on('transactionHash', (hash) => {\r\n        dispatch(balancesLoading())\r\n    })\r\n    .on('error', (error) => {\r\n        console.error(error)\r\n        window.alert('There was an error!')\r\n    })\r\n}\r\n\r\n\r\nexport const makeBuyOrder = (dispatch, exchange, token, web3, order, account) => {          // Always a Buy Orer if getting Ether and Tokens\r\n    const tokenGet = token.options.address\r\n    const amountGet = web3.utils.toWei(order.amount, 'ether')\r\n    const tokenGive = ETHER_ADDRESS\r\n    const amountGive = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\r\n\r\n    exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\r\n    .on('transactionHash', (hash) => {\r\n        dispatch(buyOrderMaking())\r\n    })\r\n    .on('error',(error) => {\r\n        console.error(error)\r\n        window.alert('There was an error!')\r\n    })\r\n}\r\n\r\n\r\n\r\nexport const makeSellOrder = (dispatch, exchange, token, web3, order, account) => {          // \r\n    const tokenGet = ETHER_ADDRESS\r\n    const amountGet = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\r\n    const tokenGive = token.options.address\r\n    const amountGive = web3.utils.toWei(order.amount, 'ether')\r\n\r\n    exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\r\n    .on('transactionHash', (hash) => {\r\n        dispatch(sellOrderMaking())\r\n    })\r\n    .on('error',(error) => {\r\n        console.error(error)\r\n        window.alert('There was an error!')\r\n    })\r\n}","import React from 'react';\r\n\r\nexport default function ({ type }) {\r\n    if (type === 'table') {\r\n        return(<tbody className=\"spinner-border text-light text-center\"></tbody>)\r\n    } else {\r\n        return(<div className=\"spinner-border text-light text-center\"></div>)\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap'\r\nimport Spinner from './Spinner'\r\nimport { \r\n    orderBookSelector,\r\n    orderBookLoadedSelector,\r\n    exchangeSelector,\r\n    accountSelector,\r\n    orderFillingSelector\r\n} from '../store/selectors'\r\nimport { fillOrder } from '../store/interactions'\r\n\r\nconst renderOrder = (order, props) => {\r\n  const { dispatch, exchange, account } = props\r\n\r\n  return(\r\n      <OverlayTrigger\r\n        key={order.id}  \r\n        placement=\"auto\"\r\n            overlay={\r\n            <Tooltip id={order.id}>\r\n              {`Click here to ${order.orderFillAction}`}\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <tr \r\n            key={order.id}\r\n            className=\"order-book-order\"\r\n            onClick={(e) => fillOrder(dispatch, exchange, order, account)}\r\n            >\r\n\r\n            <td>{order.tokenAmount}</td>\r\n            <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\r\n            <td>{order.etherAmount}</td>\r\n        </tr>\r\n      </OverlayTrigger>\r\n    )\r\n}\r\n\r\nconst showOrderBook = (props) => {\r\n    const { orderBook } = props\r\n\r\n    return(\r\n        <tbody>\r\n            {orderBook.sellOrders.map((order) => renderOrder(order, props))}\r\n            <tr>\r\n                <th>DAPP</th>\r\n                <th>DAPP/ETH</th>\r\n                <th>ETH</th>\r\n            </tr>            \r\n            {orderBook.buyOrders.map((order) => renderOrder(order, props))}\r\n        </tbody>\r\n    ) \r\n}\r\n\r\nclass OrderBook extends Component {\r\n    render() {\r\n        return (\r\n          <div className=\"vertical\">\r\n            <div className=\"card bg-dark text-white\">\r\n              <div className=\"card-header\">\r\n                Order Book\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <table className=\"table table-dark table-sm small\">\r\n                  { this.props.showOrderBook ? showOrderBook(this.props) : <Spinner type='table' /> }\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          )\r\n        }\r\n    }\r\n                \r\n\r\nfunction mapStateToProps(state) {\r\n  const orderBookLoaded = orderBookLoadedSelector(state)\r\n  const orderFilling = orderFillingSelector(state)\r\n\r\n  return {\r\n      orderBook: orderBookSelector(state),\r\n      showOrderBook: orderBookLoaded && !orderFilling,\r\n      exchange: exchangeSelector(state),\r\n      account: accountSelector(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(OrderBook);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Spinner from './Spinner'\r\nimport { \r\n  filledOrdersLoadedSelector, \r\n  filledOrdersSelector \r\n} from '../store/selectors'\r\n\r\nconst showFilledOrders = (filledOrders) => {\r\n      return(\r\n        <tbody>\r\n          { filledOrders.map((order) => {\r\n            return(\r\n              <tr className={`order-${order.id}`} key={order.id}>\r\n                <td className=\"text-muted\">{order.formattedTimestamp}</td>\r\n                <td>{order.tokenAmount}</td>\r\n                <td className={`text-${order.tokenPriceClass}`}>{order.tokenPrice}</td>\r\n              </tr>\r\n            )\r\n          }) }\r\n        </tbody>\r\n      )\r\n}\r\n\r\nclass Trades extends Component {\r\n    render() {\r\n        return (\r\n          <div className=\"vertical\">\r\n            <div className=\"card bg-dark text-white\">\r\n              <div className=\"card-header\">\r\n                Trades\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <table className=\"table table-dark table-sm small\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Time</th>\r\n                      <th>DAPP</th>\r\n                      <th>DAPP/ETH</th>\r\n                    </tr>\r\n                  </thead>\r\n                  { this.props.filledOrdersLoaded ? showFilledOrders(this.props.filledOrders) : <Spinner type=\"table\" />}\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          )\r\n        }\r\n    }\r\n                \r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n      filledOrdersLoaded: filledOrdersLoadedSelector(state),\r\n      filledOrders: filledOrdersSelector(state),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Trades)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Tabs, Tab } from 'react-bootstrap'\r\nimport Spinner from './Spinner'\r\nimport {\r\n    myFilledOrdersLoadedSelector,\r\n    myFilledOrdersSelector,\r\n    myOpenOrdersLoadedSelector,\r\n    myOpenOrdersSelector,\r\n    exchangeSelector,\r\n    accountSelector,\r\n    orderCancellingSelector\r\n} from '../store/selectors'\r\nimport { cancelOrder } from '../store/interactions'\r\n\r\nconst showMyFilledOrders = (props) => {\r\n    const { myFilledOrders } = props\r\n\r\n    return(\r\n        <tbody>\r\n            { myFilledOrders.map((order) => {\r\n                return (\r\n                    <tr key={order.id}>\r\n                        <td className=\"text-muted\">{order.formattedTimestamp}</td>\r\n                        <td className={`text-${order.orderTypeClass}`}>{order.orderSign}{order.tokenAmount}</td>\r\n                        <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\r\n                    </tr>\r\n                )\r\n            }) }\r\n        </tbody>\r\n    )\r\n}\r\n\r\nconst showMyOpenOrders = (props) => {\r\n    const { myOpenOrders, dispatch, exchange, account } = props\r\n\r\n    return(\r\n        <tbody>\r\n            { myOpenOrders.map((order) => {\r\n                return (\r\n                    <tr key={order.id}>\r\n                        <td className={`text-${order.orderTypeClass}`}>{order.tokenAmount}</td>\r\n                        <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\r\n                        <td\r\n                            className=\"text-muted cancel-order\"\r\n                            onClick={(e) => {\r\n                                cancelOrder(dispatch, exchange, order, account)\r\n                                //console.log(\"Cancelling order...\")\r\n                            }}                        \r\n                        >X</td>\r\n                    </tr>\r\n                )\r\n            }) }\r\n        </tbody>\r\n    )\r\n}\r\n\r\nclass MyTransactions extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"card bg-dark text-white\">\r\n                <div className=\"card-header\">\r\n                    My Transactions\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <Tabs defaultActiveKey=\"trades\" className=\"bg-dark text-white\">\r\n                        <Tab eventKey=\"trades\" title=\"Trades\" className=\"bg-dark\">\r\n                            <table className=\"table table-dark table-sm small\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Time</th>\r\n                                        <th>DAPP</th>\r\n                                        <th>DAPP/ETH</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                  { this.props.showMyFilledOrders ? showMyFilledOrders(this.props) : <Spinner type=\"table\" />}\r\n                        </table>\r\n                    </Tab>\r\n                    <Tab eventKey=\"orders\" title=\"Orders\">\r\n                        <table className=\"table table-dark table-sm small\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Amount</th>\r\n                                    <th>DAPP/ETH</th>\r\n                                    <th>Cancel</th>\r\n                                </tr>\r\n                            </thead>\r\n                            { this.props.showMyOpenOrders ? showMyOpenOrders(this.props) : <Spinner type=\"table\" />} \r\n                          </table>  \r\n                    </Tab> \r\n                </Tabs>\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    const myOpenOrdersLoaded= myOpenOrdersLoadedSelector(state)\r\n    const orderCancelling = orderCancellingSelector(state)\r\n\r\n    return {\r\n        myFilledOrders: myFilledOrdersSelector(state),\r\n        showMyFilledOrders: myFilledOrdersLoadedSelector(state),\r\n        myOpenOrders: myOpenOrdersSelector(state), \r\n        showMyOpenOrders: myOpenOrdersLoaded && !orderCancelling,\r\n        exchange: exchangeSelector(state),\r\n        account: accountSelector(state)\r\n    }\r\n}    \r\n\r\nexport default connect(mapStateToProps)(MyTransactions);","export const chartOptions = {\r\n    chart: {\r\n      animations: { enabled: false },\r\n      toolbar: { show: false },\r\n      width: '100px'\r\n    },\r\n    tooltip: {\r\n      enabled: true,\r\n      theme: false,\r\n      style: {\r\n        fontSize: '12px',\r\n        fontFamily: undefined\r\n      },\r\n      x: {\r\n          show: false,\r\n          format: 'dd MMM',\r\n          formatter: undefined,\r\n      },\r\n      y: {\r\n        show: true,\r\n        title: 'price'\r\n      },\r\n      marker: {\r\n        show: false,\r\n      },\r\n      items: {\r\n         display: 'flex',\r\n      },\r\n      fixed: {\r\n          enabled: false,\r\n          position: 'topRight',\r\n          offsetX: 0,\r\n          offsetY: 0,\r\n      },\r\n    },\r\n    xaxis: {\r\n      type: 'datetime',\r\n      labels: {\r\n        show: true,\r\n        style: {\r\n            colors: '#fff',\r\n            fontSize: '8px',\r\n            cssClass: 'apexcharts-xaxis-label',\r\n        },\r\n      },\r\n    },\r\n    yaxis: {\r\n      labels: {\r\n        show: true,\r\n        minWidth: 0,\r\n        maxWidth: 160,\r\n        style: {\r\n          color: '#fff',\r\n          fontSize: '8px',\r\n          cssClass: 'apexcharts-yaxis-label',\r\n        },\r\n        offsetX: 0,\r\n        offsetY: 0,\r\n        rotate: 0,\r\n      }\r\n    }\r\n  }\r\n  \r\n  export const dummyData = [    //Dummy Data to make sure chart is working\r\n    {\r\n      data: [\r\n        {\r\n          x: new Date(1538778600000),\r\n          y: [6629.81, 6650.5, 6623.04, 6633.33]\r\n        },\r\n        {\r\n          x: new Date(1538780400000),\r\n          y: [6632.01, 6643.59, 6620, 6630.11]\r\n        },\r\n        {\r\n          x: new Date(1538782200000),\r\n          y: [6630.71, 6648.95, 6623.34, 6635.65]\r\n        },\r\n        {\r\n          x: new Date(1538784000000),\r\n          y: [6635.65, 6651, 6629.67, 6638.24]\r\n        },\r\n        {\r\n          x: new Date(1538785800000),\r\n          y: [6638.24, 6640, 6620, 6624.47]\r\n        },\r\n        {\r\n          x: new Date(1538787600000),\r\n          y: [6624.53, 6636.03, 6621.68, 6624.31]\r\n        },\r\n        {\r\n          x: new Date(1538789400000),\r\n          y: [6624.61, 6632.2, 6617, 6626.02]\r\n        },\r\n        {\r\n          x: new Date(1538791200000),\r\n          y: [6627, 6627.62, 6584.22, 6603.02]\r\n        },\r\n        {\r\n          x: new Date(1538793000000),\r\n          y: [6605, 6608.03, 6598.95, 6604.01]\r\n        },\r\n        {\r\n          x: new Date(1538794800000),\r\n          y: [6604.5, 6614.4, 6602.26, 6608.02]\r\n        },\r\n        {\r\n          x: new Date(1538796600000),\r\n          y: [6608.02, 6610.68, 6601.99, 6608.91]\r\n        },\r\n        {\r\n          x: new Date(1538798400000),\r\n          y: [6608.91, 6618.99, 6608.01, 6612]\r\n        },\r\n        {\r\n          x: new Date(1538800200000),\r\n          y: [6612, 6615.13, 6605.09, 6612]\r\n        },\r\n        {\r\n          x: new Date(1538802000000),\r\n          y: [6612, 6624.12, 6608.43, 6622.95]\r\n        },\r\n        {\r\n          x: new Date(1538803800000),\r\n          y: [6623.91, 6623.91, 6615, 6615.67]\r\n        },\r\n        {\r\n          x: new Date(1538805600000),\r\n          y: [6618.69, 6618.74, 6610, 6610.4]\r\n        },\r\n        {\r\n          x: new Date(1538807400000),\r\n          y: [6611, 6622.78, 6610.4, 6614.9]\r\n        },\r\n        {\r\n          x: new Date(1538809200000),\r\n          y: [6614.9, 6626.2, 6613.33, 6623.45]\r\n        },\r\n        {\r\n          x: new Date(1538811000000),\r\n          y: [6623.48, 6627, 6618.38, 6620.35]\r\n        },\r\n        {\r\n          x: new Date(1538812800000),\r\n          y: [6619.43, 6620.35, 6610.05, 6615.53]\r\n        },\r\n        {\r\n          x: new Date(1538814600000),\r\n          y: [6615.53, 6617.93, 6610, 6615.19]\r\n        },\r\n        {\r\n          x: new Date(1538816400000),\r\n          y: [6615.19, 6621.6, 6608.2, 6620]\r\n        },\r\n        {\r\n          x: new Date(1538818200000),\r\n          y: [6619.54, 6625.17, 6614.15, 6620]\r\n        },\r\n        {\r\n          x: new Date(1538820000000),\r\n          y: [6620.33, 6634.15, 6617.24, 6624.61]\r\n        },\r\n        {\r\n          x: new Date(1538821800000),\r\n          y: [6625.95, 6626, 6611.66, 6617.58]\r\n        },\r\n        {\r\n          x: new Date(1538823600000),\r\n          y: [6619, 6625.97, 6595.27, 6598.86]\r\n        },\r\n        {\r\n          x: new Date(1538825400000),\r\n          y: [6598.86, 6598.88, 6570, 6587.16]\r\n        },\r\n        {\r\n          x: new Date(1538827200000),\r\n          y: [6588.86, 6600, 6580, 6593.4]\r\n        },\r\n        {\r\n          x: new Date(1538829000000),\r\n          y: [6593.99, 6598.89, 6585, 6587.81]\r\n        },\r\n        {\r\n          x: new Date(1538830800000),\r\n          y: [6587.81, 6592.73, 6567.14, 6578]\r\n        },\r\n        {\r\n          x: new Date(1538832600000),\r\n          y: [6578.35, 6581.72, 6567.39, 6579]\r\n        },\r\n        {\r\n          x: new Date(1538834400000),\r\n          y: [6579.38, 6580.92, 6566.77, 6575.96]\r\n        },\r\n        {\r\n          x: new Date(1538836200000),\r\n          y: [6575.96, 6589, 6571.77, 6588.92]\r\n        },\r\n        {\r\n          x: new Date(1538838000000),\r\n          y: [6588.92, 6594, 6577.55, 6589.22]\r\n        },\r\n        {\r\n          x: new Date(1538839800000),\r\n          y: [6589.3, 6598.89, 6589.1, 6596.08]\r\n        },\r\n        {\r\n          x: new Date(1538841600000),\r\n          y: [6597.5, 6600, 6588.39, 6596.25]\r\n        },\r\n        {\r\n          x: new Date(1538843400000),\r\n          y: [6598.03, 6600, 6588.73, 6595.97]\r\n        },\r\n        {\r\n          x: new Date(1538845200000),\r\n          y: [6595.97, 6602.01, 6588.17, 6602]\r\n        },\r\n        {\r\n          x: new Date(1538847000000),\r\n          y: [6602, 6607, 6596.51, 6599.95]\r\n        },\r\n        {\r\n          x: new Date(1538848800000),\r\n          y: [6600.63, 6601.21, 6590.39, 6591.02]\r\n        },\r\n        {\r\n          x: new Date(1538850600000),\r\n          y: [6591.02, 6603.08, 6591, 6591]\r\n        },\r\n        {\r\n          x: new Date(1538852400000),\r\n          y: [6591, 6601.32, 6585, 6592]\r\n        },\r\n        {\r\n          x: new Date(1538854200000),\r\n          y: [6593.13, 6596.01, 6590, 6593.34]\r\n        },\r\n        {\r\n          x: new Date(1538856000000),\r\n          y: [6593.34, 6604.76, 6582.63, 6593.86]\r\n        },\r\n        {\r\n          x: new Date(1538857800000),\r\n          y: [6593.86, 6604.28, 6586.57, 6600.01]\r\n        },\r\n        {\r\n          x: new Date(1538859600000),\r\n          y: [6601.81, 6603.21, 6592.78, 6596.25]\r\n        },\r\n        {\r\n          x: new Date(1538861400000),\r\n          y: [6596.25, 6604.2, 6590, 6602.99]\r\n        },\r\n        {\r\n          x: new Date(1538863200000),\r\n          y: [6602.99, 6606, 6584.99, 6587.81]\r\n        },\r\n        {\r\n          x: new Date(1538865000000),\r\n          y: [6587.81, 6595, 6583.27, 6591.96]\r\n        },\r\n        {\r\n          x: new Date(1538866800000),\r\n          y: [6591.97, 6596.07, 6585, 6588.39]\r\n        },\r\n        {\r\n          x: new Date(1538868600000),\r\n          y: [6587.6, 6598.21, 6587.6, 6594.27]\r\n        },\r\n        {\r\n          x: new Date(1538870400000),\r\n          y: [6596.44, 6601, 6590, 6596.55]\r\n        },\r\n        {\r\n          x: new Date(1538872200000),\r\n          y: [6598.91, 6605, 6596.61, 6600.02]\r\n        },\r\n        {\r\n          x: new Date(1538874000000),\r\n          y: [6600.55, 6605, 6589.14, 6593.01]\r\n        },\r\n        {\r\n          x: new Date(1538875800000),\r\n          y: [6593.15, 6605, 6592, 6603.06]\r\n        },\r\n        {\r\n          x: new Date(1538877600000),\r\n          y: [6603.07, 6604.5, 6599.09, 6603.89]\r\n        },\r\n        {\r\n          x: new Date(1538879400000),\r\n          y: [6604.44, 6604.44, 6600, 6603.5]\r\n        },\r\n        {\r\n          x: new Date(1538881200000),\r\n          y: [6603.5, 6603.99, 6597.5, 6603.86]\r\n        },\r\n        {\r\n          x: new Date(1538883000000),\r\n          y: [6603.85, 6605, 6600, 6604.07]\r\n        },\r\n        {\r\n          x: new Date(1538884800000),\r\n          y: [6604.98, 6606, 6604.07, 6606]\r\n        },\r\n      ]\r\n    }\r\n  ]\r\n  ","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Chart from 'react-apexcharts'\r\nimport Spinner from './Spinner'\r\nimport { chartOptions } from './PriceChart.config'\r\nimport {\r\n    priceChartLoadedSelector,\r\n    priceChartSelector\r\n} from '../store/selectors'\r\n\r\nconst priceSymbol = (lastPriceChange) => {\r\n    let output\r\n    if(lastPriceChange === '+') {\r\n        output = <span className=\"text-success\">&#9650;</span> // Green up triangle\r\n    } else {\r\n        output = <span className=\"text-danger\">&#9660;</span> // Red down triangle\r\n    }\r\n    return(output)\r\n}\r\n\r\nconst showPriceChart = (priceChart) => {\r\n    return(\r\n        <div className=\"price-chart\">\r\n            <div className=\"price\">\r\n              <h4>DAPP/ETH &nbsp; {priceSymbol(priceChart.lastPriceChange)} &nbsp; {priceChart.lastPrice}</h4>\r\n            </div>\r\n            <Chart options={chartOptions} series={priceChart.series} type='candlestick' width='100%' height='100%' />\r\n        </div>\r\n    )\r\n}\r\n\r\nclass PriceChart extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"card bg-dark text-white\">\r\n                <div className=\"card-header\">\r\n                    Price Chart\r\n                </div>\r\n                <div className=\"card-body\">\r\n                   {this.props.priceChartLoaded ? showPriceChart(this.props.priceChart) : <Spinner />}\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n\r\n    return {\r\n        priceChartLoaded: priceChartLoadedSelector(state),\r\n        priceChart: priceChartSelector(state),\r\n    }\r\n }    \r\n\r\nexport default connect(mapStateToProps)(PriceChart);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Tabs, Tab } from 'react-bootstrap'\r\nimport Spinner from './Spinner'\r\nimport {\r\n    loadBalances, \r\n    depositEther,\r\n    depositToken,\r\n    withdrawEther,\r\n    withdrawToken\r\n} from '../store/interactions'\r\nimport {                    //import from component\r\n    exchangeSelector,\r\n    tokenSelector,\r\n    accountSelector,\r\n    web3Selector,    \r\n    etherBalanceSelector,\r\n    tokenBalanceSelector,\r\n    exchangeEtherBalanceSelector,\r\n    exchangeTokenBalanceSelector,\r\n    balancesLoadingSelector,\r\n    etherDepositAmountSelector,\r\n    etherWithdrawAmountSelector,\r\n    tokenDepositAmountSelector,\r\n    tokenWithdrawAmountSelector,\r\n    } from '../store/selectors'\r\n\r\nimport { \r\n    etherDepositAmountChanged,\r\n    etherWithdrawAmountChanged,\r\n    tokenDepositAmountChanged,\r\n    tokenWithdrawAmountChanged,\r\n } from '../store/actions'\r\n\r\nconst showForm =(props) => {\r\n    const {\r\n        dispatch,\r\n        exchange,\r\n        web3,\r\n        account,\r\n        etherBalance,\r\n        tokenBalance,\r\n        exchangeEtherBalance,\r\n        exchangeTokenBalance,\r\n        etherDepositAmount,\r\n        token,\r\n        tokenDepositAmount,\r\n        etherWithdrawAmount,\r\n        tokenWithdrawAmount \r\n    } = props\r\n\r\n\r\n    // See Redux Forms for further form customization\r\n    return(\r\n        <Tabs defaultActiveKey=\"deposit\" className=\"bg-dark test-white\">\r\n\r\n            <Tab eventKey=\"deposit\" title=\"Deposit\" className=\"bg-dark\">\r\n                <table className=\"table table-dark table-sm small\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Token</th>\r\n                            <th>Wallet</th>\r\n                            <th>Exchange</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>ETH</td>\r\n                            <td>{etherBalance}</td>\r\n                            <td>{exchangeEtherBalance}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>                \r\n\r\n                <form className=\"row\" onSubmit={(event) => {\r\n                    event.preventDefault()\r\n                    depositEther(dispatch, exchange, web3, etherDepositAmount, account)\r\n                    console.log(\"form submitting...\")\r\n                }}>\r\n                   <div className=\"col-12 col-sm pr-sm-2\">\r\n                       <input\r\n                       type=\"text\"\r\n                       placeholder=\"ETH Amount\"\r\n                       onChange={(e) => dispatch( etherDepositAmountChanged(e.target.value) ) }\r\n                       className=\"form-control form-control-sm bg-dark text-white\"\r\n                       required />             \r\n                   </div>\r\n                   <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n                       <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\">Deposit</button>\r\n                   </div>\r\n                </form>\r\n\r\n                <table className=\"table table-dark table-sm small\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>DAPP</td>\r\n                            <td>{tokenBalance}</td>\r\n                            <td>{exchangeTokenBalance}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            \r\n                <form className=\"row\" onSubmit={(event) => {\r\n                    event.preventDefault()\r\n                    depositToken(dispatch, exchange, web3, token, tokenDepositAmount, account)\r\n                    console.log(\"form submitting...\")\r\n                }}>\r\n                   <div className=\"col-12 col-sm pr-sm-2\">\r\n                       <input\r\n                       type=\"text\"\r\n                       placeholder=\"DAPP Amount\"\r\n                       onChange={(e) => dispatch( tokenDepositAmountChanged(e.target.value) ) }\r\n                       className=\"form-control form-control-sm bg-dark text-white\"\r\n                       required />             \r\n                   </div>\r\n                   <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n                       <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\">Deposit</button>\r\n                   </div>\r\n                </form>\r\n\r\n            </Tab>\r\n\r\n            <Tab eventKey=\"withdraw\" title=\"Withdraw\" className=\"bg-dark\">\r\n            \r\n                <table className=\"table table-dark table-sm small\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Token</th>\r\n                            <th>Wallet</th>\r\n                            <th>Exchange</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>ETH</td>\r\n                            <td>{etherBalance}</td>\r\n                            <td>{exchangeEtherBalance}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <form className=\"row\" onSubmit={(event) => {\r\n                    event.preventDefault()\r\n                    withdrawEther(dispatch, exchange, web3, etherWithdrawAmount, account)\r\n                }}>\r\n                   <div className=\"col-12 col-sm pr-sm-2\">\r\n                       <input\r\n                       type=\"text\"\r\n                       placeholder=\"ETH Amount\"\r\n                       onChange={(e) => dispatch( etherWithdrawAmountChanged(e.target.value) )}\r\n                       className=\"form-control form-control-sm bg-dark text-white\"\r\n                       required />             \r\n                   </div>\r\n                    <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n                        <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\">Withdraw</button>\r\n                    </div>\r\n                </form>\r\n                <table className=\"table table-dark table-sm small\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>DAPP</td>\r\n                            <td>{tokenBalance}</td>\r\n                            <td>{exchangeTokenBalance}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n\r\n                <form className=\"row\" onSubmit={(event) => {\r\n                    event.preventDefault()\r\n                    withdrawToken(dispatch, exchange, web3, token, tokenWithdrawAmount, account)\r\n                }}>\r\n                   <div className=\"col-12 col-sm pr-sm-2\">\r\n                       <input\r\n                       type=\"text\"\r\n                       placeholder=\"DAPP Amount\"\r\n                       onChange={(e) => dispatch( tokenWithdrawAmountChanged(e.target.value) )}\r\n                       className=\"form-control form-control-sm bg-dark text-white\"\r\n                       required />             \r\n                   </div>\r\n                   <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n                       <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\">Withdraw</button>\r\n                   </div>\r\n                </form>\r\n\r\n            </Tab>\r\n                        \r\n        </Tabs>\r\n    )\r\n}\r\n\r\nclass Balance extends Component {\r\n    componentWillMount() {   \r\n          this.loadBlockchainData()\r\n        }\r\n      \r\n    async loadBlockchainData() {\r\n        const { dispatch, web3, exchange, token, account } = this.props\r\n        await loadBalances(dispatch, web3, exchange, token, account) // Ether balance comes from web3\r\n    }\r\n      \r\n    render() {\r\n        return (\r\n            <div className=\"card bg-dark text-white\">\r\n                <div className=\"card-header\">\r\n                    Balance\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    {this.props.showForm ? showForm(this.props) : <Spinner />}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {       //Wire components to be used in props - place into forms\r\n    const balancesLoading = balancesLoadingSelector(state)\r\n\r\n    // console.log({\r\n    //     account: accountSelector(state),\r\n    //     exchange: exchangeSelector(state),\r\n    //     token: tokenSelector(state),\r\n    //     web3: web3Selector(state),\r\n    //     etherBalance: etherBalanceSelector(state),\r\n    //     tokenBalance: tokenBalanceSelector(state),\r\n    //     exchangeEtherBalance: exchangeEtherBalanceSelector(state),\r\n    //     exchangeTokenBalance: exchangeTokenBalanceSelector(state),\r\n    //     balancesLoading: balancesLoadingSelector(state),\r\n    // })\r\n\r\n    return {\r\n        account: accountSelector(state),\r\n        exchange: exchangeSelector(state),\r\n        token: tokenSelector(state),\r\n        web3: web3Selector(state),\r\n        etherBalance: etherBalanceSelector(state),\r\n        tokenBalance: tokenBalanceSelector(state),\r\n        exchangeEtherBalance: exchangeEtherBalanceSelector(state),\r\n        exchangeTokenBalance: exchangeTokenBalanceSelector(state),\r\n    //    balancesLoading: balancesLoadingSelector(state),\r\n        balancesLoading,\r\n        showForm: !balancesLoading,\r\n        etherDepositAmount: etherDepositAmountSelector(state),\r\n        etherWithdrawAmount: etherWithdrawAmountSelector(state),\r\n        tokenDepositAmount: tokenDepositAmountSelector(state),\r\n        tokenWithdrawAmount: tokenWithdrawAmountSelector(state),\r\n     }\r\n  }    \r\n    \r\nexport default connect(mapStateToProps)(Balance)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Tabs, Tab } from 'react-bootstrap'\r\nimport Spinner from './Spinner'\r\nimport {\r\n    exchangeSelector,\r\n    tokenSelector,\r\n    accountSelector,\r\n    web3Selector,\r\n    buyOrderSelector,\r\n    sellOrderSelector\r\n} from '../store/selectors'\r\n\r\nimport {\r\n    buyOrderAmountChanged,\r\n    buyOrderPriceChanged,\r\n    sellOrderAmountChanged,\r\n    sellOrderPriceChanged,\r\n} from '../store/actions'\r\n\r\nimport {\r\n    makeBuyOrder,\r\n    makeSellOrder\r\n} from '../store/interactions'\r\n\r\nconst showForm = (props) => {\r\n    const {\r\n        dispatch,\r\n        buyOrder,\r\n        exchange,\r\n        token,\r\n        web3,\r\n        account,\r\n        sellOrder,\r\n        showBuyTotal,\r\n        showSellTotal\r\n    } = props\r\n\r\n\r\n    return(\r\n      <Tabs defaultActiveKey=\"buy\" className=\"bg-dark text-white\">\r\n  \r\n        <Tab eventKey=\"buy\" title=\"Buy\" className=\"bg-dark\">\r\n        \r\n        <form onSubmit={(event) => {\r\n            event.preventDefault()\r\n            makeBuyOrder(dispatch, exchange, token, web3, buyOrder, account)\r\n        }}>\r\n        <div className=\"form-group small\">\r\n            <label>Buy Amount (DAPP)</label>\r\n            <div className=\"input-group\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control form-control-sm bg-dark text-white\"\r\n                    placeholder=\"Buy Amount\"\r\n                    onChange={(e) => dispatch( buyOrderAmountChanged( e.target.value ) )}\r\n                    required\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className=\"form-group small\">\r\n            <label>Buy Price</label>\r\n            <div className=\"input-group\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"format-control form-control-sm bg-dark text-white\"\r\n                    placeholder=\"Buy Price\"\r\n                    onChange={(e) => dispatch( buyOrderPriceChanged( e.target.value ) )}\r\n                    required\r\n                />\r\n            </div>\r\n        </div>\r\n            <button type=\"submit\" className=\"btn btn-primary btn-sm btn-block\">Buy Order</button>\r\n            { showBuyTotal ? <small>Total: {buyOrder.amount * buyOrder.price} ETH</small> : null }\r\n        </form>    \r\n        </Tab>\r\n        \r\n        <Tab eventKey=\"sell\" title=\"Sell\" className=\"bg-dark\">\r\n\r\n        <form onSubmit={(event) => {\r\n            event.preventDefault()\r\n            makeSellOrder(dispatch, exchange, token, web3, sellOrder, account)\r\n        }}>\r\n        <div className=\"form-group small\">\r\n            <label>Sell Amount (DAPP)</label>\r\n            <div className=\"input-group\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control form-control-sm bg-dark text-white\"\r\n                    placeholder=\"Sell Amount\"\r\n                    onChange={(e) => dispatch( sellOrderAmountChanged( e.target.value ) )}\r\n                    required\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className=\"form-group small\">\r\n            <label>Sell Price</label>\r\n            <div className=\"input-group\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"format-control form-control-sm bg-dark text-white\"\r\n                    placeholder=\"Sell Price\"\r\n                    onChange={(e) => dispatch( sellOrderPriceChanged( e.target.value ) )}\r\n                    required\r\n                />\r\n            </div>\r\n        </div>\r\n            <button type=\"submit\" className=\"btn btn-primary btn-sm btn-block\">Sell Order</button>\r\n            { showSellTotal ? <small>Total: {sellOrder.amount * sellOrder.price} ETH</small> : null }\r\n        </form>\r\n\r\n        </Tab>\r\n    </Tabs>            \r\n    )\r\n}\r\n\r\nclass NewOrder extends Component {\r\n      \r\n  render() {\r\n    return (\r\n      <div className=\"card bg-dark text-white\">\r\n        <div className=\"card-header\">\r\n          New Order\r\n        </div>\r\n        <div className=\"card-body\">\r\n          {this.props.showForm ? showForm(this.props) : <Spinner />}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    const buyOrder = buyOrderSelector(state)\r\n    const sellOrder = sellOrderSelector(state)\r\n\r\n    return {\r\n        account: accountSelector(state),\r\n        exchange: exchangeSelector(state),\r\n        token: tokenSelector(state),\r\n        web3: web3Selector(state),\r\n        buyOrder,\r\n        sellOrder,\r\n        showForm: !buyOrder.making && !sellOrder.making,         //show form only if orders are not being made\r\n        showBuyTotal: buyOrder.amount && buyOrder.price,\r\n        showSellTotal: sellOrder.amount && sellOrder.price\r\n    }  \r\n}\r\n\r\nexport default connect(mapStateToProps)(NewOrder)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { exchangeSelector } from '../store/selectors'\r\nimport { loadAllOrders, subscribeToEvents } from '../store/interactions'\r\nimport OrderBook from './OrderBook'\r\nimport Trades from './Trades' // NOTE: with ES6 Default export same as React so can't use {}  e.g. Component is a named export \r\nimport MyTransactions from './MyTransactions'\r\nimport PriceChart from './PriceChart'\r\nimport Balance from './Balance'\r\nimport NewOrder from './NewOrder'\r\n\r\n\r\nclass Content extends Component {\r\n  componentWillMount() {   \r\n    this.loadBlockchainData(this.props)\r\n  }\r\n\r\n  async loadBlockchainData(props) {\r\n    const { dispatch, exchange } = props // refactor of this.exchange.props\r\n    await loadAllOrders(exchange, dispatch) // Note: exchange is in the redux store and fetched out with a selector \"exchange\" - see import above\r\n    await subscribeToEvents(exchange, dispatch)\r\n  }\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"vertical-split\">\r\n              <Balance />  \r\n               \r\n               \r\n              <NewOrder />\r\n\r\n\r\n              \r\n            </div>\r\n            <OrderBook />\r\n            <div className=\"vertical-split\">\r\n              <PriceChart />\r\n              <MyTransactions />\r\n            </div>\r\n            <Trades />                \r\n          </div>\r\n        )\r\n      }\r\n}\r\n\r\n// connect component to redux - in order to get dispatch from the props must add it to the props\r\nfunction mapStateToProps(state) {\r\n    return {\r\n      exchange: exchangeSelector(state)\r\n     }\r\n  }    \r\n    \r\nexport default connect(mapStateToProps)(Content)\r\n   \r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar'\nimport Content from './Content'\nimport { connect } from 'react-redux'\nimport { \n        loadWeb3,\n        loadAccount,\n        loadToken,\n        loadExchange } from '../store/interactions'\nimport { contractsLoadedSelector } from '../store/selectors'\n\n\nclass App extends Component {\n componentWillMount() {   \n   this.loadBlockchainData(this.props.dispatch)\n }\n \n async loadBlockchainData(dispatch) {\n  const web3 = loadWeb3(dispatch)\n  // const web3 = new Web3(window.ethereum)\n  const networkId = await web3.eth.net.getId()\n  await loadAccount(web3, dispatch)\n  const token = await loadToken(web3, networkId, dispatch)\n  if(!token) {\n    window.alert('Token smart contract not detected on the current network. Please select another network with Metamask.')\n    return \n  }\n // console.log(\"token\", token)\n  \n  const exchange = await loadExchange(web3, networkId, dispatch)\n  if(!exchange) {\n    window.alert('Exchange smart contract not detected on the current network. Please select another network with Metamask.')\n    return\n  }\n} //async close\n\n  \n  render() {\n        return (\n        <div>\n         <Navbar />\n         { this.props.contractsLoaded ? <Content /> : <div className=\"content\"></div> }\n        </div>\n      );\n    }\n  } // Class close\n  \n  // connect component to redux - in order to get dispatch from the props must add it to the props\n function mapStateToProps(state) {\n  return {\n    contractsLoaded: contractsLoadedSelector(state)\n    }\n }\n\n export default connect(mapStateToProps)(App);\n","// Reducers - Redux Store -- handles actions; the form changing\r\n\r\nimport { findIndex } from 'lodash';\r\nimport { combineReducers } from 'redux'; \r\n\r\nfunction web3(state =  {}, action) {\r\n  switch (action.type) {\r\n    case 'WEB3_LOADED':\r\n      return { ...state, connection: action.connection }\r\n    case 'WEB3_ACCOUNT_LOADED':\r\n      return { ...state, account: action.account }\r\n    case 'ETHER_BALANCE_LOADED':\r\n      return { ...state, balance: action.balance }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nfunction token(state = {}, action) {\r\n  switch (action.type) {\r\n    case 'TOKEN_LOADED':\r\n      return { ...state, loaded: true, contract: action.contract }\r\n    case 'TOKEN_BALANCE_LOADED':\r\n      return { ...state, balance: action.balance }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction exchange(state = {}, action) {\r\n  let index, data\r\n\r\n  switch (action.type) {\r\n    case 'EXCHANGE_LOADED':\r\n      return { ...state, loaded: true, contract: action.contract }\r\n    case 'CANCELLED_ORDERS_LOADED':\r\n      return { ...state, cancelledOrders: { loaded: true, data: action.cancelledOrders } }\r\n    case 'FILLED_ORDERS_LOADED':\r\n      return { ...state, filledOrders: { loaded: true, data: action.filledOrders } }\r\n    case 'ALL_ORDERS_LOADED':\r\n      return { ...state, allOrders: { loaded: true, data: action.allOrders } }\r\n    case 'ORDER_CANCELLING' :\r\n      return { ...state, orderCancelling: true }\r\n    case 'ORDER_CANCELLED': // Adding cancelled order to array\r\n      return{\r\n        ...state,\r\n        orderCancelling: false,\r\n        cancelledOrders: {\r\n          ...state.cancelledOrders,\r\n          data:[\r\n            ...state.cancelledOrders.data,\r\n            action.order\r\n          ]          \r\n        }\r\n      } \r\n    case 'ORDER_FILLED':\r\n      // Prevent duplicate orders\r\n      index = state.filledOrders.data.findIndex(order => order.id === action.order.id)\r\n\r\n      if(index === -1) {\r\n        data = [...state.filledOrders.data, action.order]\r\n      } else {\r\n        data = state.filledOrders.data\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        orderFilling: false,\r\n        filledOrders: {\r\n          ...state.filledOrders,\r\n          data\r\n        }\r\n      }\r\n\r\n    case 'ORDER_FILLING':\r\n      return { ...state, orderFilling: true }\r\n    \r\n  //BALANCES \r\n    case 'EXCHANGE_ETHER_BALANCE_LOADED':\r\n      return { ...state, etherBalance: action.balance }\r\n          \r\n    case 'EXCHANGE_TOKEN_BALANCE_LOADED':\r\n      return { ...state, tokenBalance: action.balance }  \r\n  \r\n    case 'BALANCES_LOADING':\r\n      return { ...state, balancesLoading: true }    // when we call BALANCES_LOADING we set balancesLoading to true\r\n        \r\n    case 'BALANCES_LOADED':                         // The selector is looking for balancesLoading \r\n      return { ...state, balancesLoading: false }   // BALANCES_LOADED is called when the balances are loaded, so set to false\r\n    \r\n    case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\r\n      return { ...state, etherDepositAmount: action.amount }\r\n\r\n    case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\r\n      return { ...state, etherWithdrawAmount: action.amount }\r\n\r\n    case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\r\n      return { ...state, tokenDepositAmount: action.amount }\r\n  \r\n    case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\r\n      return { ...state, tokenWithdrawAmount: action.amount }\r\n\r\n    case 'BUY_ORDER_AMOUNT_CHANGED':\r\n      return { ...state, buyOrder: { ...state.buyOrder, amount: action.amount } }\r\n    \r\n    case 'BUY_ORDER_PRICE_CHANGED':\r\n      return { ...state, buyOrder: { ...state.buyOrder, price: action.price} }  \r\n\r\n    case 'BUY_ORDER_MAKING':\r\n      return { ...state, buyOrder: { ...state.buyOrder, amount: null, price: null, making: true } }   // Clear out data to make an order so making is true\r\n\r\n    case 'ORDER_MADE':\r\n      // Prevent duplicate order\r\n      index = state.allOrders.data.findIndex(order => order.id === action.order.id);\r\n\r\n      if(index === -1) {\r\n        data = [...state.allOrders.data, action.order]\r\n      } else {\r\n          data = state.allOrders.data\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        allOrders: {\r\n          ...state.allOrders,\r\n          data\r\n        },\r\n       buyOrder: {\r\n          ...state.buyOrder,\r\n         making: false\r\n        },\r\n        sellOrder: {\r\n          ...state.sellOrder,\r\n          making: false\r\n        }\r\n      }\r\n\r\n\r\n    case 'SELL_ORDER_AMOUNT_CHANGED':\r\n      return { ...state, sellOrder: { ...state.sellOrder, amount: action.amount } }\r\n    \r\n    case 'SELL_ORDER_PRICE_CHANGED':\r\n      return { ...state, sellOrder: { ...state.sellOrder, price: action.price} }  \r\n\r\n    case 'SELL_ORDER_MAKING':\r\n      return { ...state, sellOrder: { ...state.sellOrder, amount: null, price: null, making: true } }   // Clear out data to make an order so making is true\r\n\r\n\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    web3,\r\n    token,\r\n    exchange\r\n})\r\n\r\nexport default rootReducer","\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers'\r\n\r\nconst loggerMiddleware = createLogger()\r\nconst middleware = []\r\n\r\n// For Redux Tools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport default function configureStore(preloadedState) {\r\n    return createStore(\r\n        rootReducer,\r\n        preloadedState,\r\n        composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n// import * as React from 'react'; DOES NOT WORK\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './components/App';\nimport configureStore from './store/configureStore';\nimport * as serviceWorker from './serviceWorker';\n// import reportWebVitals from '.src/reportWebVitals';\n\n// const store = configureStore()\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n  )\n  \nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}